[["donor.program_id",{"left":{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"diff":{"type":"deleted","data":{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}}}}],["donor.submitter_donor_id",{"left":{"description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},"right":{"description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID"},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},"diff":{"meta":{"notes":{"type":"deleted","data":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}}}}],["follow_up.program_id",{"left":{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"right":{"name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},"diff":{"description":{"type":"updated","data":"Unique identifier of the ARGO program."}}}],["follow_up.days_to_follow_up",{"left":{"description":"Time interval between primary diagnosis and follow-up event.","name":"days_to_follow_up","valueType":"integer","restrictions":{"required":true},"meta":{"units":"days","displayName":"Days to follow-up"}},"diff":{"type":"deleted","data":{"description":"Time interval between primary diagnosis and follow-up event.","name":"days_to_follow_up","valueType":"integer","restrictions":{"required":true},"meta":{"units":"days","displayName":"Days to follow-up"}}}}],["follow_up.disease_status_at_followup",{"left":{"description":"Indicate the donor's disease status at time of follow-up.","name":"disease_status_at_followup","valueType":"string","restrictions":{"required":true,"codeList":["Clinical remission","Distant progression","Loco-regional progression","No evidence of disease","Partial remission","Relapse or recurrence","Stable"]},"meta":{"displayName":"Disease Status at Follow-Up"}},"right":{"description":"Indicate the donor's disease status at time of follow-up.","name":"disease_status_at_followup","valueType":"string","restrictions":{"required":true,"codeList":["Complete remission","Distant progression","Loco-regional progression","No evidence of disease","Partial remission","Relapse or recurrence","Stable"]},"meta":{"core":true,"displayName":"Disease Status at Follow-Up"}},"diff":{"restrictions":{"codeList":{"type":"updated","data":{"added":["Complete remission"],"deleted":["Clinical remission"]}}},"meta":{"core":{"type":"created","data":true}}}}],["follow_up.relapse_interval",{"left":{"name":"relapse_interval","description":"Time interval between end of primary treatment and disease progression (in days)","valueType":"integer","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n        const intervalOfFollowup = parseInt($row.interval_of_followup);\n\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            relapseInterval = parseInt($field);\n            if (relapseInterval > intervalOfFollowup) {\n                result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\n            }\n        }\n        return  result;\n    })()"]},"meta":{"units":"days","dependsOn":"follow_up.disease_status_at_followup","notes":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","displayName":"Relapse Interval"}},"right":{"description":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","name":"relapse_interval","valueType":"integer","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n        const intervalOfFollowup = parseInt($row.interval_of_followup);\n\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            relapseInterval = parseInt($field);\n            if (relapseInterval > intervalOfFollowup) {\n                result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\n            }\n        }\n        return  result;\n    })()"]},"meta":{"core":true,"units":"days","dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","displayName":"Relapse Interval"}},"diff":{"description":{"type":"updated","data":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days."},"meta":{"notes":{"type":"updated","data":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."},"core":{"type":"created","data":true}}}}],["exposure.program_id",{"left":{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","restrictions":{"required":true},"meta":{"displayName":"Program ID"}},"diff":{"type":"deleted","data":{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","restrictions":{"required":true},"meta":{"displayName":"Program ID"}}}}],["exposure.submitter_donor_id",{"left":{"name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Donor ID"}},"diff":{"type":"deleted","data":{"name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Donor ID"}}}}],["exposure.smoking_status",{"left":{"name":"smoking_status","description":"Smoking status of a patient at the time of the data collection.","valueType":"string","restrictions":{"codeList":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"]},"meta":{"displayName":"Smoking status"}},"diff":{"type":"deleted","data":{"name":"smoking_status","description":"Smoking status of a patient at the time of the data collection.","valueType":"string","restrictions":{"codeList":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"]},"meta":{"displayName":"Smoking status"}}}}],["exposure.smoking_pack_years",{"left":{"name":"smoking_pack_years","description":"Number of packs of cigarette multiplied by the number of cigarettes smoked","valueType":"string","meta":{"dependsOn":"exposure.smoking_status","notes":"Pack-years is calculated by multiplying the number of packs of cigarettes smoked per day by the number of years the person has smoked. For example, 1 pack year is equal to smoking 1 pack per day for 1 year","displayName":"smoking_pack_years"}},"diff":{"type":"deleted","data":{"name":"smoking_pack_years","description":"Number of packs of cigarette multiplied by the number of cigarettes smoked","valueType":"string","meta":{"dependsOn":"exposure.smoking_status","notes":"Pack-years is calculated by multiplying the number of packs of cigarettes smoked per day by the number of years the person has smoked. For example, 1 pack year is equal to smoking 1 pack per day for 1 year","displayName":"smoking_pack_years"}}}}],["exposure.alcohol_status",{"left":{"name":"alcohol_status","description":"Alcohol consumtion based on recommended daily limit","valueType":"string","restrictions":{"codeList":["No alcohol consumtion","Alcohol intake within recommended daily limit","Alcohol intake exceeds recommended daily limit","Alcohol consumption unknownr"]},"meta":{"notes":"Refer to the Canadian Centre on Substance Abuse, for men, no more than 15 drinks a week, with no more than 3 drinks a day most days. No more than 4 drinks on any single occasion. For women, no more than 10 drinks a week, with no more than 2 drinks a day most days. No more than 3 drinks on any single occasion.","displayName":"Alcohol status"}},"diff":{"type":"deleted","data":{"name":"alcohol_status","description":"Alcohol consumtion based on recommended daily limit","valueType":"string","restrictions":{"codeList":["No alcohol consumtion","Alcohol intake within recommended daily limit","Alcohol intake exceeds recommended daily limit","Alcohol consumption unknownr"]},"meta":{"notes":"Refer to the Canadian Centre on Substance Abuse, for men, no more than 15 drinks a week, with no more than 3 drinks a day most days. No more than 4 drinks on any single occasion. For women, no more than 10 drinks a week, with no more than 2 drinks a day most days. No more than 3 drinks on any single occasion.","displayName":"Alcohol status"}}}}],["exposure.alcohol_consumption_duration",{"left":{"name":"alcohol_consumption_duration","description":"Indicate the duration of time, in years, that the donor has consumed alcohol.","valueType":"integer","meta":{"displayName":"Alcolohol Consumption Duration"}},"diff":{"type":"deleted","data":{"name":"alcohol_consumption_duration","description":"Indicate the duration of time, in years, that the donor has consumed alcohol.","valueType":"integer","meta":{"displayName":"Alcolohol Consumption Duration"}}}}],["exposure.FSA",{"left":{"name":"FSA","description":"Forward Sortation Area (3-digit postal code)","valueType":"string","meta":{"notes":"Forward Sortaion Area (FSA) is the 3 first digits of the postal code","displayName":"Forward Sortation Area"}},"diff":{"type":"deleted","data":{"name":"FSA","description":"Forward Sortation Area (3-digit postal code)","valueType":"string","meta":{"notes":"Forward Sortaion Area (FSA) is the 3 first digits of the postal code","displayName":"Forward Sortation Area"}}}}],["donor.study_id",{"right":{"name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.study_id","displayName":"Study ID"},"restrictions":{"required":true}},"diff":{"type":"created","data":{"name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.study_id","displayName":"Study ID"},"restrictions":{"required":true}}}}],["follow_up.interval_of_followup",{"right":{"description":"Interval from the primary diagnosis date to the follow-up date, in days.","name":"interval_of_followup","valueType":"integer","restrictions":{"required":true},"meta":{"core":true,"units":"days","displayName":"Interval Of Follow-Up","notes":"The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."}},"diff":{"type":"created","data":{"description":"Interval from the primary diagnosis date to the follow-up date, in days.","name":"interval_of_followup","valueType":"integer","restrictions":{"required":true},"meta":{"core":true,"units":"days","displayName":"Interval Of Follow-Up","notes":"The associated primary diagnosis is used as the reference point for this interval. To calculate this, find the number of days since the date of primary diagnosis."}}}}],["follow_up.submitter_primary_diagnosis_id",{"right":{"name":"submitter_primary_diagnosis_id","valueType":"string","description":"Indicate if the follow-up is related to a specific primary diagnosis event in the clinical timeline.","meta":{"displayName":"Submitter Primary Diagnosis ID","primaryId":true,"notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},"diff":{"type":"created","data":{"name":"submitter_primary_diagnosis_id","valueType":"string","description":"Indicate if the follow-up is related to a specific primary diagnosis event in the clinical timeline.","meta":{"displayName":"Submitter Primary Diagnosis ID","primaryId":true,"notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}}],["follow_up.submitter_treatment_id",{"right":{"name":"submitter_treatment_id","valueType":"string","description":"Indicate if the follow-up is related to a specific treatment event in the clinical timeline.","meta":{"primaryId":true,"displayName":"Submitter Treatment ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},"diff":{"type":"created","data":{"name":"submitter_treatment_id","valueType":"string","description":"Indicate if the follow-up is related to a specific treatment event in the clinical timeline.","meta":{"primaryId":true,"displayName":"Submitter Treatment ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}}],["follow_up.weight_at_followup",{"right":{"description":"Indicate the donor's weight, in kilograms (kg), at the time of follow-up.","name":"weight_at_followup","valueType":"integer","meta":{"displayName":"Weight at Follow-Up"}},"diff":{"type":"created","data":{"description":"Indicate the donor's weight, in kilograms (kg), at the time of follow-up.","name":"weight_at_followup","valueType":"integer","meta":{"displayName":"Weight at Follow-Up"}}}}],["follow_up.relapse_type",{"right":{"description":"Indicate the donor's relapse type.","name":"relapse_type","valueType":"string","restrictions":{"codeList":["Distant recurrence/metastasis","Local recurrence","Local recurrence and distant metastasis","Progression (liquid tumours)"],"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","displayName":"Relapse Type"}},"diff":{"type":"created","data":{"description":"Indicate the donor's relapse type.","name":"relapse_type","valueType":"string","restrictions":{"codeList":["Distant recurrence/metastasis","Local recurrence","Local recurrence and distant metastasis","Progression (liquid tumours)"],"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","displayName":"Relapse Type"}}}}],["follow_up.method_of_progression_status",{"right":{"description":"Indicate the method(s) used to confirm the donor's progression or relapse or recurrence disease status. (Codelist reference: NCI CDE ID: 6161031)","name":"method_of_progression_status","valueType":"string","isArray":true,"restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"],"codeList":["Biomarker in liquid biopsy (e.g. tumour marker in blood or urine)","Biopsy","Blood draw","Bone marrow aspirate","Core biopsy","Cystoscopy","Cytology","Debulking","Diagnostic imaging","Dilation and curettage procedure","Enucleation","Excisional biopsy","Fine needle aspiration","Imaging","Incisional biopsy","Laparoscopy","Laparotomy","Other","Pap Smear","Pathologic review","Physical exam","Surgical resection","Thoracentesis","Ultrasound guided biopsy"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file.","displayName":"Method Of Progression Status"}},"diff":{"type":"created","data":{"description":"Indicate the method(s) used to confirm the donor's progression or relapse or recurrence disease status. (Codelist reference: NCI CDE ID: 6161031)","name":"method_of_progression_status","valueType":"string","isArray":true,"restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"],"codeList":["Biomarker in liquid biopsy (e.g. tumour marker in blood or urine)","Biopsy","Blood draw","Bone marrow aspirate","Core biopsy","Cystoscopy","Cytology","Debulking","Diagnostic imaging","Dilation and curettage procedure","Enucleation","Excisional biopsy","Fine needle aspiration","Imaging","Incisional biopsy","Laparoscopy","Laparotomy","Other","Pap Smear","Pathologic review","Physical exam","Surgical resection","Thoracentesis","Ultrasound guided biopsy"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.\nTo include multiple values, separate values with a pipe delimiter '|' within your file.","displayName":"Method Of Progression Status"}}}}],["follow_up.anatomic_site_progression_or_recurrences",{"right":{"description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrences","valueType":"string","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}},"diff":{"type":"created","data":{"description":"Indicate the ICD-O-3 topography code for the anatomic site where disease progression, relapse or recurrence occurred, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","name":"anatomic_site_progression_or_recurrences","valueType":"string","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"],"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","displayName":"Anatomic Site Progression or Recurrences","examples":"C50.1,C18","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence."}}}}],["follow_up.recurrence_tumour_staging_system",{"right":{"description":"Specify the tumour staging system used to stage the cancer at time of retreatment for recurrence or disease progression. This may be represented as rTNM in the medical report.","name":"recurrence_tumour_staging_system","valueType":"string","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","displayName":"Recurrance Tumour Staging System"}},"diff":{"type":"created","data":{"description":"Specify the tumour staging system used to stage the cancer at time of retreatment for recurrence or disease progression. This may be represented as rTNM in the medical report.","name":"recurrence_tumour_staging_system","valueType":"string","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()","(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n    \n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        return  result;\n    })()"]},"meta":{"core":true,"dependsOn":"follow_up.disease_status_at_followup","notes":"This field is required to be submitted if disease_status_at_followup indicates a state of progression, relapse, or recurrence.","displayName":"Recurrance Tumour Staging System"}}}}],["follow_up.recurrence_t_category",{"right":{"name":"recurrence_t_category","description":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence T Category"},"restrictions":{"codeList":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}},"diff":{"type":"created","data":{"name":"recurrence_t_category","description":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence T Category"},"restrictions":{"codeList":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}}],["follow_up.recurrence_n_category",{"right":{"name":"recurrence_n_category","description":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence N Category"},"restrictions":{"codeList":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}},"diff":{"type":"created","data":{"name":"recurrence_n_category","description":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence N Category"},"restrictions":{"codeList":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}}],["follow_up.recurrence_m_category",{"right":{"name":"recurrence_m_category","description":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence M Category"},"restrictions":{"codeList":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"]}},"diff":{"type":"created","data":{"name":"recurrence_m_category","description":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at the time of retreatment for a recurrence or disease progression, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is required only if the selected recurrence_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Recurrence M Category"},"restrictions":{"codeList":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"]}}}}],["follow_up.recurrence_stage_group",{"right":{"name":"recurrence_stage_group","description":"The code to represent the stage group of the tumour, as assigned by the reporting recurrence_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) at the time of retreatment for a recurrence or disease progression.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is dependent on the selected recurrence_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","displayName":"Recurrence Stage Group"},"restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.recurrence_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.recurrence_tumour_staging_system && $row.recurrence_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'recurrence_tumour_staging_system' is set to '${\n          $row.recurrence_tumour_staging_system\n        }', 'recurrence_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}},"diff":{"type":"created","data":{"name":"recurrence_stage_group","description":"The code to represent the stage group of the tumour, as assigned by the reporting recurrence_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) at the time of retreatment for a recurrence or disease progression.","valueType":"string","meta":{"core":true,"dependsOn":"follow_up.recurrence_tumour_staging_system","notes":"This field is dependent on the selected recurrence_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","displayName":"Recurrence Stage Group"},"restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.recurrence_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.recurrence_tumour_staging_system && $row.recurrence_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'recurrence_tumour_staging_system' is set to '${\n          $row.recurrence_tumour_staging_system\n        }', 'recurrence_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}}}}],["follow_up.posttherapy_tumour_staging_system",{"right":{"description":"Specify the tumour staging system used to stage the cancer after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery. This may be represented as ypTNM or ycTNM in the medical report.","name":"posttherapy_tumour_staging_system","valueType":"string","restrictions":{"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"],"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]},"meta":{"displayName":"Post-therapy Tumour Staging System"}},"diff":{"type":"created","data":{"description":"Specify the tumour staging system used to stage the cancer after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery. This may be represented as ypTNM or ycTNM in the medical report.","name":"posttherapy_tumour_staging_system","valueType":"string","restrictions":{"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"],"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]},"meta":{"displayName":"Post-therapy Tumour Staging System"}}}}],["follow_up.posttherapy_t_category",{"right":{"name":"posttherapy_t_category","description":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy T Category"},"restrictions":{"codeList":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}},"diff":{"type":"created","data":{"name":"posttherapy_t_category","description":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy T Category"},"restrictions":{"codeList":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}}}}],["follow_up.posttherapy_n_category",{"right":{"name":"posttherapy_n_category","description":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy N Category"},"restrictions":{"codeList":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}},"diff":{"type":"created","data":{"name":"posttherapy_n_category","description":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy N Category"},"restrictions":{"codeList":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}}}}],["follow_up.posttherapy_m_category",{"right":{"name":"posttherapy_m_category","description":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy M Category"},"restrictions":{"codeList":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"]}},"diff":{"type":"created","data":{"name":"posttherapy_m_category","description":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is required only if the selected posttherapy_tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"Post-therapy M Category"},"restrictions":{"codeList":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"]}}}}],["follow_up.posttherapy_stage_group",{"right":{"name":"posttherapy_stage_group","description":"The code to represent the stage group of the tumour, as assigned by the reporting posttherapy_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is dependent on the selected posttherapy_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","displayName":"Post-therapy Stage Group"},"restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.posttherapy_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.posttherapy_tumour_staging_system && $row.posttherapy_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'posttherapy_tumour_staging_system' is set to '${\n          $row.posttherapy_tumour_staging_system\n        }', 'posttherapy_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}},"diff":{"type":"created","data":{"name":"posttherapy_stage_group","description":"The code to represent the stage group of the tumour, as assigned by the reporting posttherapy_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.) after treatment for patients receiving systemic and/or radiation therapy alone or as a component of their initial treatment, or as neoadjuvant therapy before planned surgery.","valueType":"string","meta":{"dependsOn":"follow_up.posttherapy_tumour_staging_system","notes":"This field is dependent on the selected posttherapy_tumour_staging_system.\nPlease refer to the documentation for Tumour Staging Classifications: http://docs.icgc-argo.org/docs/submission/dictionary-overview#tumour-staging-classifications","displayName":"Post-therapy Stage Group"},"restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.posttherapy_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.posttherapy_tumour_staging_system && $row.posttherapy_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'posttherapy_tumour_staging_system' is set to '${\n          $row.posttherapy_tumour_staging_system\n        }', 'posttherapy_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}}}}]]