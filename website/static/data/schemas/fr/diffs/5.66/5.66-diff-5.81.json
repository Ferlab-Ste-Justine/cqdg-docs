{"schemas":{"sample_registration":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}},"sample_type":{"meta":{"notes":{"left":null,"right":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl DNA (NCIT:C449), Ribonucleic Acid (NCIT:C812)"}},"restrictions":{"codeList":{"left":["DNA","RNA"],"right":["NCIT:C449","NCIT:C812"],"data":{"added":["NCIT:C449","NCIT:C812"],"deleted":["DNA","RNA"]}}}}},"created":{},"deleted":{}},"study":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifiant unique pour l'étude"}},"access_requirements":{"meta":{"notes":{"left":"Référez-vous au code du Data Use Ontology https://github.com/EBISPOT/DUO","right":"Référez-vous aux codes du Data Use Ontology pour obtenir la définition des codes https://github.com/EBISPOT/DUO"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000017\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\"\n          ];\n        \n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false, \n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n        \n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000012\",\n            \"DUO:0000015\",\n            \"DUO:0000016\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\",\n            \"DUO:0000043\",\n            \"DUO:0000044\",\n            \"DUO:0000045\",\n            \"DUO:0000046\",\n            \"Biospecimen Access\"\n          ];\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false,\n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n\n        return result;\n    })"]},"codeList":{"right":["DUO:0000012","DUO:0000015","DUO:0000016","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029","DUO:0000043","DUO:0000044","DUO:0000045","DUO:0000046","Biospecimen Access"],"data":["DUO:0000012","DUO:0000015","DUO:0000016","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029","DUO:0000043","DUO:0000044","DUO:0000045","DUO:0000046","Biospecimen Access"]}}}},"created":{"data_source":{"changeType":"created","name":"data_source","valueType":"string","description":"Décrit la principale source des données colligées des participants de l'étude","restrictions":{"required":true},"meta":{"core":true,"displayName":"Source des données"}},"selection_criteria":{"changeType":"created","name":"selection_criteria","valueType":"string","description":"Critères d'inclusion et d'exclusion de l'étude","restrictions":{"required":true},"meta":{"core":true,"displayName":"Critères de sélection"}},"publication":{"changeType":"created","name":"publication","valueType":"string","description":"Digital Object Identifier de la publication décrivant la méthodologie et les critères de sélection de l'étude.","restrictions":{"required":true},"meta":{"core":true,"notes":"Veuillez fournier un hyperlien DOI avec le format suivant, https://doi.org/ suivi du numéro DOI.","displayName":"Publication"}}},"deleted":{"biospecimen_access":{"changeType":"deleted","name":"biospecimen_access","valueType":"boolean","description":"L'accès aux spécimens biologiques est permis (par consentement)","restrictions":{"required":true},"meta":{"validationDependency":true,"core":true,"displayName":"Accès aux spécimens biologiques "}}}},"participant":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}},"age_at_recruitment":{"restrictions":{"required":{"left":true,"right":false}}},"age_of_death":{"description":{"left":"Âge du participant au moment de son décès (en jours)","right":"Âge du participant (en jours) au moment de son décès"},"meta":{"core":{"left":"true","right":true}}}},"created":{"gender":{"changeType":"created","description":"Genre du participant","name":"gender","valueType":"string","restrictions":{"required":true,"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Information obtenue des données médico-administratives ou déclarée par le participant","displayName":"Genre"}}},"deleted":{"sex":{"changeType":"deleted","description":"Sexe du participant","name":"sex","valueType":"string","restrictions":{"required":true,"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Information obtenue des données médico-administratives ou déclarée par le participant","displayName":"Sexe"}}}},"biospecimen":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}},"age_biospecimen_collection":{"restrictions":{"range":{"left":{"min":0,"max":4000},"right":{"min":0,"max":40000}}}},"biospecimen_tissue_source":{"meta":{"notes":{"left":"Termes tirés de NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl","right":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl Blood (NCIT:C12434), Saliva (NCIT:C13275), Solid Tissue Sample (NCIT:C164014), Bone Marrow (NCIT:C12431), Umbilical Cord (NCIT:C34320), Umbilical Cord Blood (NCIT:C34320)"}},"restrictions":{"codeList":{"left":["Blood","Bone marrow","Saliva","Solid tissue"],"right":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431","NCIT:C13300","NCIT:C34320","Unknown"],"data":{"added":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431","NCIT:C13300","NCIT:C34320","Unknown"],"deleted":["Blood","Bone marrow","Saliva","Solid tissue"]}}}},"tumor_normal_designation":{"meta":{"notes":{"left":"Indiquer `Not applicable' si le spécimen biologique n'a pas été analysé.","right":"Indiquez `Not applicable' si le spécimen biologique n'a pas été analysé."}}},"cancer_biospecimen_type":{"meta":{"notes":{"left":null,"right":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl Derived Cell Line (NCIT:C156445), Metastatic Tumor Sample (NCIT:156440), Sample Derived from New Primary (NCIT:156441), Tumor-Adjacent Normal Specimen (NCIT:164032), Tumor Tissue (NCIT:C18009), Normal Tissue Segment (NCIT:C162623), Cell Line-Derived Xenograft (NCIT:C156443)"}},"restrictions":{"required":{"left":true,"right":null},"codeList":{"left":["Derived Cell Line","Metastatic Tumor Sample","Sample Derived from New Primary","Tumor-Adjacent Normal Specimen","Tumor Tissue","Normal Tissue Segment","Cell Line-Derived Xenograft"],"right":["NCIT:C156445","NCIT:156440","NCIT:156441","NCIT:164032","NCIT:C18009","NCIT:C162623","NCIT:C156443"],"data":{"added":["NCIT:C156445","NCIT:156440","NCIT:156441","NCIT:164032","NCIT:C18009","NCIT:C162623","NCIT:C156443"],"deleted":["Derived Cell Line","Metastatic Tumor Sample","Sample Derived from New Primary","Tumor-Adjacent Normal Specimen","Tumor Tissue","Normal Tissue Segment","Cell Line-Derived Xenograft"]}},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"cancer_biospecimen_anatomic_location_source_text":{"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"tumor_histological_type_source_text":{"restrictions":{"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":null},"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"tumor_histological_type_ncit_code":{"restrictions":{"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":"^ncit:C\\d+$"},"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}}},"created":{"cancer_biospecimen_anatomic_location_ncit_code":{"changeType":"created","name":"cancer_biospecimen_anatomic_location_ncit_code","valueType":"string","description":"Indiquer le code NCIT représentant la localisation anatomique du spécimen biologique","restrictions":{"regex":"^ncit:C\\d+$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]},"meta":{"validationDependency":true,"core":true,"notes":"Référez-vous au NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl","displayName":"Localisation anatomique du spécimen biologique (code)","examples":"NCIT:C12971"}}},"deleted":{"biospecimen_anatomic_location_ncit_code":{"changeType":"deleted","name":"biospecimen_anatomic_location_ncit_code","valueType":"string","description":"Indiquer le code NCIT représentant la localisation anatomique du spécimen biologique","restrictions":{"required":true,"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$"},"meta":{"validationDependency":true,"core":true,"notes":"Référez-vous au NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl","displayName":"Localisation anatomique du spécimen biologique (code)","examples":"NCIT:C12971"}}}},"Diagnosis":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}},"stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumor_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumor_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumor_staging_system && $row.tumor_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumor_staging_system' is set to '${\n                    $row.tumor_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","valueType":"string","description":"Identifiant pour le participant soumis par l'étude","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"Submitter participant ID","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_diagnosis_id":{"changeType":"deleted","name":"submitter_diagnosis_id","valueType":"string","description":"Identifiant unique pour le diagnostic du participant soumis par l'étude","meta":{"primaryId":true,"validationDependency":true,"foreignKey":"diagnosis.submitter_diagnosis_id","displayName":"ID du diagnostic soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"treatment":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{},"deleted":{}},"follow_up":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{},"deleted":{}},"exposure":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{},"deleted":{}},"phenotype":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{},"deleted":{}},"family":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{"submitter_family_id":{"changeType":"created","name":"submitter_family_id","valueType":"string","description":"Identifiant pour la famille du participant soumis par l'étude","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"ID de la famille soumis par l'étude","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}}},"deleted":{"submitter_family":{"changeType":"deleted","name":"submitter_family","valueType":"string","description":"Identifant pour la famille du participant soumis par l'étude","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"ID de la famille soumis par l'étude","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}}}},"family_history":{"updated":{"study_id":{"description":{"left":"Identifant pour l'étude","right":"Identifiant pour l'étude"}}},"created":{},"deleted":{}},"datat":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Identifiant unique pour l'étude","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"dataset_name":{"changeType":"created","name":"dataset_name","valueType":"string","description":"Nom du jeu de données","restrictions":{"required":true},"meta":{"core":true,"displayName":"Nom du jeu de données"}},"dataset_description":{"changeType":"created","name":"dataset_description","valueType":"string","description":"Description brève du jeux de données","restrictions":{"required":true},"meta":{"core":true,"notes":"Veuillez décrire le but, l'approche expérimentale et les critères de sélection du jeu de données.","displayName":"Description brève du jeux de données"}}},"deleted":{}}}}
