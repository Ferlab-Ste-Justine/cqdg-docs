{"schemas":{"sample_registration":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_sample_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"created":{},"deleted":{}},"study":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"created":{},"deleted":{}},"data access":{"updated":{"entity_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"access_limitations":{"restrictions":{"codeList":{"right":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"],"data":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]}}},"access_requirements":{"restrictions":{"codeList":{"right":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"],"data":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]}}}},"created":{},"deleted":{}},"donor":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"ethnicity":{"restrictions":{"codeList":{"left":["French Canadian","English Canadian","Aboriginal","White","Arab","Latin American","Black","East Asian","West Asian","Southeast Asian","South Asian","Filipino","Unknown","Other"],"right":["French Canadian","English Canadian","Aboriginal","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixed","Other"],"data":{"added":["European","African or Caribbean","East and Southeast Asian","Mixed"],"deleted":["White","Black","East Asian","West Asian","Southeast Asian","Filipino","Unknown"]}}}},"cause_of_death":{"restrictions":{"script":{"left":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"]}}},"age_of_death":{"restrictions":{"script":{"left":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"biospecimen":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"non requis si le spécimen n'a pas été collecté pour des fins de diagnostic #/notes/submitter_id","right":"non requis si le spécimen n'a pas été collecté pour des fins de diagnostic #/notes/id"}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"biospecimen_tissue_source":{"restrictions":{"codeList":{"left":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"],"right":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"],"data":{"added":[],"deleted":["Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"]}}}},"tumor_histological_type":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation.trim().toLowerCase();\n\n        if (!currField && tumorNormalDesignation.toLowerCase() === 'tumor') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is tumor.`,\n            };\n        }\n\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"Diagnosis":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"diagnosis_source_text":{"meta":{"examples":{"left":"cancer du seine, AVC","right":"cancer du sein, AVC"},"notes":{"left":"Veuillez fournir l'information telle qu'elle est rapportée dans l'étude si l'utilisation des codes ICD-10 ou MONDO n'est pas possible","right":"Veuillez fournir l'information telle qu'elle est rapportée dans l'étude"}}},"diagnosis_ICD_code":{"restrictions":{"regex":{"left":null,"right":"^((C|c)7(A|a|B|b)|[A-Za-z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$"}}},"diagnosis_mondo_code":{"restrictions":{"regex":{"left":null,"right":"^((M|m)(O|o)(N|n)(D|d)(O|o)_)[0-9]{7}$"}}},"age_at_diagnosis":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"]}}},"diagnosis_type":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]}}},"tumour_staging_system":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]}}},"t_category":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field || typeof $field == \"undefined\"){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"n_category":{"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field || typeof $field == \"undefined\"){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"m_category":{"description":{"left":"Catégorie m (métastatse) selon le système de stadification des tumeurs cancéreuses solides de l'Union internationale contre le cancer (UICC). Les métastases sont classées en fonction de leur absence ou de leur présence au moment du diagnosticet avant le traitement, et se classent de M0 à M1.","right":"Catégorie m (métastase) selon le système de stadification des tumeurs cancéreuses solides de l'Union internationale contre le cancer (UICC). Les métastases sont classées en fonction de leur absence ou de leur présence au moment du diagnosticet avant le traitement, et se classent de M0 à M1."},"restrictions":{"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field || typeof $field == \"undefined\"){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{"stage_group":{"changeType":"created","name":"stage_group","description":"Stade de la tumeur assigné par le sytème de gradation et indiquant le pronostic (stade I, II, III etc.).","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const isCancer = parseInt($row.is_cancer);\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer === 1 && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.tumour_staging_system","notes":"Ce champs dépend du système de stadification","displayName":"Stade clinic de la tumeur"}}},"deleted":{"clinical_stage_group":{"changeType":"deleted","name":"clinical_stage_group","description":"Stade de la tumeur assigné par le sytème de gradation et indiquant le pronostic (stade I, II, III etc.).","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"]},"meta":{"dependsOn":"diagnosis.tumour_staging_system","notes":"Ce champs dépend du système de stadification","displayName":"Stade clinic de la tumeur"}}}},"treatment":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_treatment_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"treatment_type":{"meta":{"examples":{"left":"Chemotherapy|Hormonal therapy","right":null}},"restrictions":{"codeList":{"left":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmarcotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"right":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmacotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"data":{"added":["Other pharmacotherapy"],"deleted":["Other pharmarcotherapy"]}}}},"treatment_response":{"restrictions":{"codeList":{"left":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatement cessation due to toxicity","Impovement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"right":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatment cessation due to toxicity","Improvement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"data":{"added":["Treatment cessation due to toxicity","Improvement of symptoms"],"deleted":["Treatement cessation due to toxicity","Impovement of symptoms"]}}}},"medication_name":{"restrictions":{}},"medication_code":{"restrictions":{}},"medication_class":{"restrictions":{}}},"created":{"treatment_start_date":{"changeType":"created","description":"Date de début du traitement","name":"treatment_start_date","valueType":"string","meta":{"notes":"Pour les médicaments, veuillez fournir la date du début de l'ordonnance (DD-MM-YYY). Pour les traitements uniques, comme les chirurgies, veuillez fournir la date de l'intervention.","displayName":"Date du début du traitement"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}},"treatment_end_date":{"changeType":"created","description":"Date de fin du traitement","name":"treatment_end_date","valueType":"string","meta":{"notes":"Pour les médicaments, veuillez fournir la date de fin de l'ordonnance (DD-MM-YYYY). Pour les traitement uniques, comme les chirurgies, veuillez laisser vide","displayName":"Date de fin de l'ordonnance"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"deleted":{"medication_start_date":{"changeType":"deleted","description":"Date de début de l'ordonnance de ce médicament (MM-YYY)","name":"medication_start_date","valueType":"string","meta":{"notes":"Pour l'information auto-déclarée, utiliser la date lorsque le médicament a commencé a être pris.","dependsOn":"treatment.treatment_type","displayName":"Date du début de l'ordonnance"}},"medication_end_date":{"changeType":"deleted","description":"Date de fin de l'ordonnance de ce médicament (MM-YYYY)","name":"medication_end_date","valueType":"string","meta":{"notes":"Pour l'information auto-déclarée, utiliser la date lorsque le médicament a cessé d'être pris.","dependsOn":"treatment.treatment_type","displayName":"Date de fin de l'ordonnance"}}}},"follow_up":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_follow_up_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"created":{},"deleted":{}},"exposure":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"FSA":{"restrictions":{}}},"created":{},"deleted":{}},"phenotype":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_phenotype_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"phenotype_HPO_code":{"restrictions":{"regex":{"left":null,"right":"^((h|H)(p|P):)[0-9]{7}$"}}}},"created":{"phenotype_source_text":{"changeType":"created","name":"phenotype_source_text","valueType":"string","description":"Le phenotype (ou anomalie) du donneur tel que rapporté par l'étude","restrictions":{"required":true},"meta":{"examples":"trigonocéphalie, angiome","notes":"Veuillez fournir l'information telle qu'elle est rapportée dans l'étude","displayName":"Phénotype rapporté dans l'étude"}}},"deleted":{"phenotype_HPO_category":{"changeType":"deleted","name":"phenotype_HPO_category","valueType":"string","description":"Terme utilisé dans HPO pour le définir la catégorie du phénotype du donneur","restrictions":{"required":true},"meta":{"core":true,"displayName":"Catégorie d'anomalie phénotypique","notes":"Référez-vous aux catégories d'anomalies phénotypiques dans HPO (HP:000018) https://hpo.jax.org/app/browse/term/HP:0000118","examples":"Abnormality of the eye"}}}},"family_relationship":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_family_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id_1":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id_2":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"family_type":{"meta":{"displayName":{"left":"Type de groupe familiale","right":"Type de groupe familial"}}},"family_1_2_relationship":{"meta":{"notes":{"left":"Référez-vous au système de code HL7 pour identifier la relation entre les donneurs http://terminology.hl7.org/CodeSystem/v3-RoleCode","right":null}},"restrictions":{"codeList":{"right":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}},"family_2_1_relationship":{"meta":{"notes":{"left":"Référez-vous au système de code HL7 pour identifier la relation entre les donneurs http://terminology.hl7.org/CodeSystem/v3-RoleCode","right":null}},"restrictions":{"codeList":{"right":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}}},"created":{},"deleted":{}},"family_history":{"updated":{"study_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":null,"right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_donor_id":{"meta":{"notes":{"left":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`.","right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"submitter_family_condition_id":{"meta":{"notes":{"left":null,"right":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"restrictions":{"regex":{"left":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}","right":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"family_condition_relationship":{"restrictions":{}}},"created":{},"deleted":{}}}}
