{"schemas":{"donor":{"updated":{"cause_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n    if (!currField && vitalStatus.toLowerCase() === 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the donor's vital_status is deceased.`,\n      };\n    } else if (currField && vitalStatus.toLowerCase() !== 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n      };\n    }\n    return result;\n  })()"]}}},"age_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n    if (!currField && vitalStatus.toLowerCase() === 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the donor's vital_status is deceased.`,\n      };\n    } else if (currField && vitalStatus.toLowerCase() !== 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n      };\n    }\n    return result;\n  })()"]}}}},"created":{},"deleted":{}},"biospecimen":{"updated":{},"created":{"tumor_normal_designation":{"changeType":"created","name":"tumor_normal_designation","valueType":"string","description":"Le spécimen biologique provient de tissu tumoral ou normal","restrictions":{"required":true,"codeList":["Normal","Tumor"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tissu normal ou tumoral"}},"tumor_histological_type":{"changeType":"created","name":"tumor_histological_type","description":"Code histologique (morphologie) du néoplasme selon la classification ICD-O-3 (International Classification of Diseases for Oncology, 3rd Edition) déclaré dans le rapport de pathologie","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"Si le spécimen biologique est une tumeur. Veuillez vous référer au manuel ICD-O-3 à l'adresse suivante https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Type histologique de la tumeur"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorNormalDesignation = $row.tumor_normal_designation.trim().toLowerCase();\n\n    if (!currField && tumorNormalDesignation.toLowerCase() === 'tumor') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the biospecimen's tumor_normal_designation is tumor.`,\n      };\n    }\n\n    return result;\n  })()"]}}},"deleted":{"tumour_normal_designation":{"changeType":"deleted","name":"tumour_normal_designation","valueType":"string","description":"Le spécimen biologique provient de tissu tumoural ou normal","restrictions":{"required":true,"codeList":["Normal","Tumour"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tissu normal ou tumoural"}},"tumour_histological_type":{"changeType":"deleted","name":"tumour_histological_type","description":"Code histologique (morphologie) du néoplasme selon la classification ICD-O-3 (International Classification of Diseases for Oncology, 3rd Edition) déclaré dans le rapport de pathologie","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumour_normal_designation","notes":"Si le spécimen biologique est une tumeur. Veuillez vous référer au manuel ICD-O-3 à l'adresse suivante https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Type histologique de la tumeur"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"]}}}},"Diagnosis":{"updated":{"diagnosis_mondo_code":{"restrictions":{"regex":{"left":"^((M|m)(O|o)(N|n)(D|d)(O|o)_)[0-9]{7}$","right":"^((M|m)(O|o)(N|n)(D|d)(O|o):)[0-9]{7}$"}}},"age_at_diagnosis":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    try {\n      const currField = parseFloat($field);\n      if (currField >= 101) {\n        result = {\n          valid: false,\n          message: `${$name} must be between 0 and 100, optionally with decimal.`,\n        };\n      }\n    } catch (err) {\n      result = {\n        valid: false,\n        message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n      };\n    }\n\n    return result;\n  })()"]}}},"diagnosis_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const isCancer = parseInt($row.is_cancer);\n\n    if (!currField && isCancer === 1) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n      };\n    }\n    return result;\n  })()"]}}},"tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const isCancer = parseInt($row.is_cancer);\n\n    if (!currField && isCancer === 1) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n      };\n    }\n    return result;\n  })()"]}}},"stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const isCancer = parseInt($row.is_cancer);\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer === 1 && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const isCancer = parseInt($row.is_cancer);\n\n    if ($field && !$row.tumour_staging_system) {\n      result = {\n        valid: false,\n        message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n      };\n    }\n\n    if (isCancer === 1 && !$field) {\n      result = {\n        valid: false,\n        message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n      };\n    }\n\n    if ($field) {\n      let codeList = [];\n      switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = ['stage i', 'stage ii', 'stage iii'];\n          break;\n        case 'lugano staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage iea',\n            'stage ieb',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iiea',\n            'stage iieb',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs',\n          ];\n          break;\n        case 'rai staging system':\n          codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb',\n          ];\n          break;\n        case 'binet staging system':\n          codeList = ['stage a', 'stage b', 'stage c'];\n          break;\n        case 'ajcc 8th edition':\n          codeList = [\n            'stage 0',\n            'stage 0a',\n            'stage 0is',\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ia3',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ic',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iia1',\n            'stage iia2',\n            'stage iib',\n            'stage iic',\n            'stage iie',\n            'stage iii',\n            'stage iiia',\n            'stage iiia1',\n            'stage iiia2',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iiid',\n            'stage iv',\n            'stage iva',\n            'stage iva1',\n            'stage iva2',\n            'stage ivb',\n            'stage ivc',\n            'occult carcinoma',\n            'stage 1',\n          ];\n          break;\n        case 'ajcc 7th edition':\n          codeList = [\n            'stage 0',\n            'stage 0a',\n            'stage 0is',\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ic',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iia1',\n            'stage iia2',\n            'stage iib',\n            'stage iic',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage iva1',\n            'stage iva2',\n            'stage ivb',\n            'stage ivc',\n            'occult carcinoma',\n            'stage 1',\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n          $row.tumour_staging_system\n        }', 'stage_group' must be one of the following: \\n${codeList\n          .map((code) => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]}}},"t_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"]}}},"n_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"]}}},"m_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"]}}}},"created":{},"deleted":{}},"treatment":{"updated":{"medication_name":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"]}}},"medication_code":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"]}}},"medication_class":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"]}}},"treatment_start_date":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"]}}},"treatment_end_date":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"]}}}},"created":{},"deleted":{}}}}
