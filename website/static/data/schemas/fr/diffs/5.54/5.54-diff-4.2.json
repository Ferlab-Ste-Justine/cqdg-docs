{"schemas":{"sample_registration":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_sample_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}},"created":{},"deleted":{}},"study":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"short_name":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null}}}},"created":{"website":{"changeType":"created","name":"website","valueType":"string","description":"Website of the Study","meta":{"displayName":"Website of the Study"}},"access_limitations":{"changeType":"created","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO and provide a semicolon (;) delimited list of requirements "}},"access_requirements":{"changeType":"created","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO and provide a semicolon (;) delimited list of requirements","examples":"Ethics approval required (DUO:0000021); Time limit on use (DUO:0000025)"}}},"deleted":{"access_authority":{"changeType":"deleted","name":"access_authority","valueType":"string","description":"Contact information for the Stuy's access authority","meta":{"displayName":"Access authority","notes":"Provide website or email information"}}}},"data access":{"updated":{},"created":{},"deleted":{"entity_type":{"changeType":"deleted","name":"entity_type","valueType":"string","description":"Type of entity to which access limitations and requirements apply","meta":{"core":true,"displayName":"Entity type"},"restrictions":{"required":true,"codeList":["Study","Donnor ","Biospecimen","File"]}},"entity_id":{"changeType":"deleted","name":"entity_id","valueType":"string","description":"Unique identifier for the entity","meta":{"validationDependency":true,"primaryId":true,"displayName":"Entity ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"access_limitations":{"changeType":"deleted","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"deleted","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}}}},"donor":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"gender":{"restrictions":{"required":{"left":true,"right":null}}},"ethnicity":{"meta":{"notes":{"left":"French Canadian trace their ancestry to French colonists who settled in Canada, English Canadians are of English ethnic origin and heritage, Aboriginal (First Nations, Metis, Inuit), White (European descent), Arab (e.g. Egypt, Iraq, Jordan, Lebanon), Latin American (Hispanic), Black (African/Caribbean), East Asian (e.g. China, Japan, Korea, Taiwan), West Asian (e.g. Turkey, Iran, Afghanistan), Southeast Asian (e.g. Malaysia, Indonesia, Viet Nam), South Asian (e.g. India, Sri Lanka, Pakistan, Bangladesh), Filipino, Unknown, Other","right":null}},"restrictions":{"codeList":{"left":["French Canadian","English Canadian","Aboriginal","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixed","Other"],"right":["French Canadian","English Canadian","Aboriginal","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixted descent","Other"],"data":{"added":["Mixted descent"],"deleted":["Mixed"]}}}},"cause_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}}},"age_of_death":{"valueType":{"left":"number","right":"integer"},"meta":{"units":{"left":"years","right":"days"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}}},"genealogy_available":{"valueType":{"left":"boolean","right":"string"},"restrictions":{}}},"created":{"height":{"changeType":"created","description":"Indicate the donor's height, in centimeters (cm)","name":"height","valueType":"integer","meta":{"units":"cm","displayName":"Height"}},"body_weight":{"changeType":"created","description":"Indicate the donor's weight, in kilograms (kg)","name":"body_weight","valueType":"integer","meta":{"units":"kg","displayName":"Body weight"}},"bmi":{"changeType":"created","description":"Indicate the donor's Body Mass Index (BMI) in kg/m²","name":"bmi","valueType":"integer","meta":{"units":"kg/m²","displayName":"BMI"}}},"deleted":{"physical_measures_available":{"changeType":"deleted","description":"Indicate if physical measures are available for this donor","name":"physical_measures_available","valueType":"boolean","meta":{"displayName":"Availability of physical measures"}},"laboratory_measures_available":{"changeType":"deleted","description":"Indicate if laboratory meausres are available for this donor","name":"laboratory_measures_available","valueType":"boolean","meta":{"displayName":"Availability of laboratory measures"}},"lifestyle_available":{"changeType":"deleted","description":"Indicate if lifestyle and behavior data is available for this donor","name":"lifestyle_available","valueType":"boolean","meta":{"displayName":"Availability of lifestyle data"}},"medication_available":{"changeType":"deleted","description":"Indicate if information about medication use is available for this donor","name":"medication_available","valueType":"boolean","meta":{"displayName":"Availability of medication data"}},"environment_exposure_available":{"changeType":"deleted","description":"Indicate if information about environmental exposure is available for this donor","name":"environment_exposure_available","valueType":"boolean","meta":{"displayName":"Availability of environmental exposure data"}},"family_history_available":{"changeType":"deleted","description":"Indicate if information about the donor's family health history is available","name":"family_history_available","valueType":"boolean","meta":{"displayName":"Availability of family history data"}}}},"biospecimen":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"description":{"left":"Indicate the diagnosis event in the clinical timeline that this biospecimen acquisition was related to","right":"Indicate the diagnosis event in the clinical timeline that this biospecimen acquisition was related to."},"meta":{"notes":{"left":"not required if the biospecimen was not collected for a diagnostic purpose #/notes/id","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"required":{"left":null,"right":true}}},"date_biospecimen_collection":{"meta":{"core":{"left":null,"right":true}},"restrictions":{}},"tumor_normal_designation":{"meta":{"notes":{"left":"Indicate `Not applicable' if the biospecimen was not analysed.","right":null}},"restrictions":{"codeList":{"left":["Normal","Tumor","Not applicable"],"right":["Normal","Tumor"],"data":{"added":[],"deleted":["Not applicable"]}}}},"biospecimen_tissue_source":{"restrictions":{"codeList":{"left":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"],"right":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"],"data":{"added":["Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"],"deleted":[]}}}},"biospecimen_type":{"restrictions":{"codeList":{"left":["Cell line - derived from normal","Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Normal","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"right":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"data":{"added":["Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line"],"deleted":["Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line"]}}}},"tumor_histological_type":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"],"right":null}}},"biospecimen_access":{"valueType":{"left":"boolean","right":"string"},"restrictions":{"codeList":{"right":["Yes","No"],"data":["Yes","No"]}}}},"created":{"submitter_sample_id":{"changeType":"created","name":"submitter_sample_id","valueType":"string","description":"Unique identifier of the molecular sample, assigned by the data provider","meta":{"primaryId":true,"validationDependency":true,"displayName":"Submitter Sample ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},"sample_type":{"changeType":"created","description":"Type of molecular sample used for analysis testing","name":"sample_type","valueType":"string","restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"]},"meta":{"core":true,"displayName":"Sample type"}}},"deleted":{}},"Diagnosis":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"diagnosis_ICD_code":{"description":{"left":"ICD-10 code used to define a condtion","right":"ICD-10 code used to define condtion"},"meta":{"examples":{"left":"C41.1, C16.9","right":"C41.1,C16.9,C00.5,D46.9"},"notes":{"left":"Write the exact ICD-10 code - refer to https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","right":"For WHO ICD-10 codes, refer to https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx"},"core":{"left":null,"right":true}},"restrictions":{"regex":{"left":"^[A-TV-Z][0-9][0-9AB].?[0-9A-TV-Z]{0,4}$","right":"^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        console.log('$row ', $row)\n        console.log('$name ', $name)\n        console.log('$field ', $field)\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code.trim()) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code.trim()) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"],"right":null},"required":{"left":null,"right":true}}},"age_at_diagnosis":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"min":0,"max":100},"right":null},"required":{"left":null,"right":true}}},"is_self_reported":{"valueType":{"left":"boolean","right":"string"},"restrictions":{}},"is_cancer":{"valueType":{"left":"boolean","right":"string"},"restrictions":{"codeList":{"right":["Yes","No"],"data":["Yes","No"]}}},"diagnosis_type":{"description":{"left":"Indicate if the diagnosis is based on clinical or histological (histo-pathological) criteria","right":"Basis of diagnosis"},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"is_cancer_primary":{"valueType":{"left":"boolean","right":"string"},"restrictions":{}},"t_category":{"description":{"left":"The code to represent the extent of the primary tumor (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual","right":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual"},"meta":{"dependsOn":{"left":"diagnosis.tumor_staging_system","right":"diagnosis.tumour_staging_system"},"notes":{"left":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"n_category":{"meta":{"dependsOn":{"left":"diagnosis.tumor_staging_system","right":"diagnosis.tumour_staging_system"},"notes":{"left":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"m_category":{"meta":{"dependsOn":{"left":"diagnosis.tumor_staging_system","right":"diagnosis.tumour_staging_system"},"notes":{"left":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}}},"created":{"diagnosis_ICD_term":{"changeType":"created","name":"diagnosis_ICD_term","valueType":"string","description":"Name of diagnosis","restrictions":{"required":true},"meta":{"core":true,"displayName":"Diagnosis ICD-10 term"}},"diagnosis_ICD_category":{"changeType":"created","name":"diagnosis_ICD_category","valueType":"string","description":"Disease category as defined in the WHO ICD-10","restrictions":{"required":true},"meta":{"core":true,"notes":"This refers to the body systems chapters of the WHO ICD-10, https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","displayName":"ICD-10 Disease category"}},"tumour_staging_system":{"changeType":"created","name":"tumour_staging_system","valueType":"string","description":"Indicate the tumour staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"],"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumour Staging System"}},"clinical_stage_group":{"changeType":"created","name":"clinical_stage_group","description":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.clinical_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'clinical_tumour_staging_system' is set to '${\n          $row.clinical_tumour_staging_system\n        }', 'clinical_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]},"meta":{"dependsOn":"diagnosis.tumour_staging_system","notes":"This field is dependent on the selected tumour_staging_system","displayName":"Stage Group"}}},"deleted":{"diagnosis_source_text":{"changeType":"deleted","name":"diagnosis_source_text","valueType":"string","description":"Condition as reported in the study's dataset","restrictions":{"required":true},"meta":{"core":true,"examples":"breast cancer, stroke","notes":"Provide exact information as per the dataset","displayName":"Name of the condition"}},"diagnosis_mondo_code":{"changeType":"deleted","name":"diagnosis_mondo_code","valueType":"string","description":"Mondo code used to define a condtion","restrictions":{"regex":"^(MONDO:)[0-9]{7}$","script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        console.log('$row ', $row)\n        console.log('$name ', $name)\n        console.log('$field ', $field)\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code.trim()) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code.trim()) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]},"meta":{"examples":"MONDO_0002131, MONDO_0001056","notes":"Write the exact MONDO code. For MONDO codes, refer to https://www.ebi.ac.uk/ols/ontologies/mondo","displayName":"Diagnosis Mondo code"}},"tumor_staging_system":{"changeType":"deleted","name":"tumor_staging_system","valueType":"string","description":"Indicate the tumor staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumor Staging System"}},"stage_group":{"changeType":"deleted","name":"stage_group","description":"Stage group of the tumor, as assigned by the reporting tumor_staging_system, that indicates the overall prognostic tumor stage (ie. Stage I, Stage II, Stage III etc.)","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.tumor_staging_system","notes":"This field is dependent on the selected tumor_staging_system","displayName":"Stage Group"}}}},"treatment":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"treatment_type":{"meta":{"examples":{"left":null,"right":"Chemotherapy|Hormonal therapy"}},"restrictions":{"codeList":{"left":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmacotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"right":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmarcotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"data":{"added":["Other pharmarcotherapy"],"deleted":["Other pharmacotherapy"]}}}},"treatment_response":{"restrictions":{"codeList":{"left":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatment cessation due to toxicity","Improvement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"right":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatement cessation due to toxicity","Impovement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"data":{"added":["Treatement cessation due to toxicity","Impovement of symptoms"],"deleted":["Treatment cessation due to toxicity","Improvement of symptoms"]}}}},"medication_name":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"medication_code":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"medication_class":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null},"regex":{"left":"^[ABCDGHJLMNPRSV][0-9]{2}[A-Z]{2}[0-9]{2}$","right":null}}}},"created":{"medication_start_date":{"changeType":"created","description":"Date of the first prescription dispensation (MM-YYYY)","name":"medication_start_date","valueType":"string","meta":{"notes":"For self-reported information provide date when stopped taking the Rx.","dependsOn":"treatment.treatment_type","displayName":"Medication start date"}},"medication_end_date":{"changeType":"created","description":"Date of the last prescription dispensation (MM-YYYY)","name":"medication_end_date","valueType":"string","meta":{"notes":"For self-reported information provide date when stopped taking the Rx.","dependsOn":"treatment.treatment_type","displayName":"Medication end date"}}},"deleted":{"treatment_start_date":{"changeType":"deleted","description":"Date when treatment started (DD-MM-YYYY)","name":"treatment_start_date","valueType":"string","meta":{"notes":"For medication, provide date of first prescription dispensation (MM-YYYY). For one-time treatments, such as surgeries, provide the date of the intervention.","displayName":"Treatment start date"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"regex":"^[ABCDGHJLMNPRSV][0-9]{2}[A-Z]{2}[0-9]{2}$"}},"treatment_end_date":{"changeType":"deleted","description":"Date when treatment ended (DD-MM-YYYY)","name":"treatment_end_date","valueType":"string","meta":{"notes":"For medication, provide date of last prescription dispensation (DD-MM-YYYY). Leave blank for one-time treatments such as sugeries.","displayName":"Treatment end date"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}}},"follow_up":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"description":{"left":"Unique identifier of the diagnosis event, assigned by the data provider.","right":"Indicate the diagnosis event in the clinical timeline that this biospecimen acquisition was related to."},"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_follow_up_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"relapse_interval":{"meta":{"notes":{"left":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumors) occurred afterwards, then this field will indicate the length of disease free interval, in days.","right":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days."}},"restrictions":{}}},"created":{},"deleted":{}},"exposure":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"smoking_pack_years":{"meta":{"notes":{"left":"Not required if smoking history is unknown or if the donor never smoked. Pack-years is calculated by multiplying the number of packs of cigarettes (20 cigarettes per pack) smoked per day by the number of years the person has smoked. For example, 1 pack year is equal to smoking 1 pack per day for 1 year","right":"Pack-years is calculated by multiplying the number of packs of cigarettes (20 cigarettes per pack) smoked per day by the number of years the person has smoked. For example, 1 pack year is equal to smoking 1 pack per day for 1 year"}}},"alcohol_status":{"description":{"left":"Current alcohol consumtion based on recommended daily limit","right":"Alcohol consumtion based on recommended daily limit"},"restrictions":{"codeList":{"left":["No alcohol consumption","Alcohol intake within recommended daily limit","Alcohol intake exceeds recommended daily limit","Alcohol consumption unknown"],"right":["No alcohol consumtion","Alcohol intake within recommended daily limit","Alcohol intake exceeds recommended daily limit","Alcohol consumption unknown"],"data":{"added":["No alcohol consumtion"],"deleted":["No alcohol consumption"]}}}},"FSA":{"restrictions":{"regex":{"left":"^[A-Za-z][0-9][A-Za-z]$","right":null}}}},"created":{"alcohol_consumption_duration":{"changeType":"created","name":"alcohol_consumption_duration","description":"Indicate the duration, in years, that the donor has consumed alcohol","valueType":"integer","meta":{"displayName":"Alcolohol Consumption Duration"}}},"deleted":{}},"phenotype":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_phenotype_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"phenotype_HPO_code":{"description":{"left":"Code used for the phenotype in the Human Phenotype Ontology terminology","right":"Human Phenotype Ontology terminology for observed phenotype"},"meta":{"notes":{"left":"Write the exact code used in the HPO, for instance: HP:0001161. Please refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification.","right":"Refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification."},"examples":{"left":null,"right":"HP:0000621"}},"restrictions":{"regex":{"left":"^(HP:)[0-9]{7}$","right":null}}},"age_at_phenotype":{"valueType":{"left":"number","right":"integer"},"meta":{"units":{"left":"years","right":"days"},"core":{"left":null,"right":true}},"restrictions":{}},"phenotype_observed":{"valueType":{"left":"boolean","right":"string"},"restrictions":{"codeList":{"right":["Yes","No"],"data":["Yes","No"]}}}},"created":{"phenotype_HPO_term":{"changeType":"created","name":"phenotype_HPO_term","valueType":"string","description":"Term used for the phenotype in the Human Phenotype Ontology terminology","restrictions":{"required":true},"meta":{"core":true,"notes":"Refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification.","displayName":"Human Phenotype Ontology term"}},"phenotype_HPO_category":{"changeType":"created","name":"phenotype_HPO_category","valueType":"string","description":"Term used for the phenotypic abnormality category in the Human Phenotype Ontology terminology","restrictions":{"required":true},"meta":{"core":true,"displayName":"Category of phenotypic abnormality","notes":"Refer to the categories of the Phenotypic Abnormality Subontology of the HPO (HP:000018) https://hpo.jax.org/app/browse/term/HP:0000118","examples":"Abnormality of the eye"}}},"deleted":{"phenotype_source_text":{"changeType":"deleted","name":"phenotype_source_text","valueType":"string","description":"Phenotype (or abnormality) as reported in the study's dataset","restrictions":{"required":true},"meta":{"core":true,"examples":"microcephaly, angioma","notes":"Provide exact information as per the dataset","displayName":"Name of the phenotype"}}}},"family_relationship":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_family_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_donor_id_1":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_donor_id_2":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"family_1_2_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}},"family_2_1_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}}},"created":{},"deleted":{"family_type":{"changeType":"deleted","name":"family_type","description":"Type of family-based study design","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Family Type"}}}},"family_history":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null},"foreignKey":{"left":null,"right":"study.study_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_family_condition_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"family_condition_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donor and family member http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"right":null,"data":{"added":[],"deleted":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}}},"family_cancer_history":{"restrictions":{"codeList":{"left":["Yes","No","Unknown"],"right":["Yes","No","unknow"],"data":{"added":["unknow"],"deleted":["Unknown"]}}}}},"created":{},"deleted":{}},"family":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"study.study_id","displayName":"Study ID"},"restrictions":{"required":true}},"submitter_family_id":{"changeType":"created","name":"submitter_family_id","valueType":"string","description":"Unique identifier of the family, assigned by the data provider","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Family ID","validationDependency":true,"primaryId":true}},"family_type":{"changeType":"created","name":"family_type","description":"Type of family-based study design","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Family Type"}}},"deleted":{}}}}
