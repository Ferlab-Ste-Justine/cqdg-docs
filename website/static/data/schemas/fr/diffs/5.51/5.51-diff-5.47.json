{"schemas":{"donor":{"updated":{"age_of_death":{"valueType":{"left":"number","right":"integer"},"meta":{"units":{"left":"years","right":"days"}}}},"created":{},"deleted":{}},"Diagnosis":{"updated":{"diagnosis_ICD_code":{"restrictions":{"regex":{"left":"^[A-TV-Z][0-9][0-9AB].?[0-9A-TV-Z]{0,4}$","right":"^((C)7(A|B)|[A-Z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$"}}},"age_at_diagnosis":{"valueType":{"left":"number","right":"integer"},"restrictions":{"range":{"left":{"min":0,"max":100},"right":null},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        let result = {valid: true, message: 'Ok'};\n\n        if(!$field){\n            return result;\n        }\n\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"phenotype":{"updated":{"age_at_phenotype":{"valueType":{"left":"number","right":"integer"},"meta":{"units":{"left":"years","right":"days"}}}},"created":{},"deleted":{}}}}
