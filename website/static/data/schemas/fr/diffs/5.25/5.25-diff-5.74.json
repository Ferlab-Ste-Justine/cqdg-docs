{"schemas":{"sample_registration":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude.","right":"Identifant pour l'étude"}},"submitter_biospecimen_id":{"description":{"left":"Identifiant unique pour le spécimen biologique soumis par l'étude.","right":"Identifiant pour le spécimen biologique soumis par l'étude."}},"sample_type":{"meta":{"notes":{"left":null,"right":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl DNA (NCIT:C449), Ribonucleic Acid (NCIT:C812)"}},"restrictions":{"codeList":{"left":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"],"right":["NCIT:C449","NCIT:C812"],"data":{"added":["NCIT:C449","NCIT:C812"],"deleted":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"]}}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","description":"Identifiant pour le participant soumis par l'étude.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","description":"Identifiant unique pour le donneur, soumis par l'étude.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"study":{"updated":{"keyword":{"meta":{"notes":{"left":"liste de mots-clés délimitée avec des points-virgules (;)","right":"Liste de mots-clés délimitée avec des points-virgules (;)"}}},"domain":{"restrictions":{"codeList":{"left":["Cancer","Rare disease","Neurodevelopmental conditions","General health","Not applicable"],"right":["Aging","Birth Defects","Cancer","Circulatory and Respiratory Health","General Health","Infection and Immunity","Musculoskeletal Health and Arthritis","Neurodevelopmental Conditions","Neurosciences, Mental Health and Addiction","Nutrition, Metabolism and Diabetes","Population Genomics","Rare Diseases","Not Applicable","Other"],"data":{"added":["Aging","Birth Defects","Circulatory and Respiratory Health","General Health","Infection and Immunity","Musculoskeletal Health and Arthritis","Neurodevelopmental Conditions","Neurosciences, Mental Health and Addiction","Nutrition, Metabolism and Diabetes","Population Genomics","Rare Diseases","Not Applicable","Other"],"deleted":["Rare disease","Neurodevelopmental conditions","General health","Not applicable"]}}}},"population":{"restrictions":{"codeList":{"left":["Pediatric","Adult","Pediatic and adult"],"right":["Pediatric","Adult","Pediatric and adult"],"data":{"added":["Pediatric and adult"],"deleted":["Pediatic and adult"]}}}}},"created":{"access_limitations":{"changeType":"created","name":"access_limitations","description":"Restrictions pour l'accès telles que définies dans l'ontologie DUO de GA4GH","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000042"]},"meta":{"core":true,"displayName":"Restrictions pour l'accès","notes":"Référez-vous au Data Use Ontology https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"created","name":"access_requirements","description":"Conditions d'utilisation telles que définies dans l'ontologie DUO de GA4GH","valueType":"string","restrictions":{"required":true,"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000012\",\n            \"DUO:0000015\",\n            \"DUO:0000016\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\",\n            \"DUO:0000043\",\n            \"DUO:0000044\",\n            \"DUO:0000045\",\n            \"DUO:0000046\",\n            \"Biospecimen Access\"\n          ];\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false,\n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n\n        return result;\n    })"],"codeList":["DUO:0000012","DUO:0000015","DUO:0000016","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029","DUO:0000043","DUO:0000044","DUO:0000045","DUO:0000046","Biospecimen Access"]},"meta":{"core":true,"displayName":"Conditions d'utilisation","notes":"Référez-vous aux codes du Data Use Ontology pour obtenir la définition des codes https://github.com/EBISPOT/DUO","examples":"DUO:0000021;DUO:0000025"}}},"deleted":{"short_name":{"changeType":"deleted","name":"short_name","valueType":"string","description":"Accronyme ou nom abrégé de l'étude","meta":{"core":true,"displayName":"Accronyme ou nom abrégé de l'étude"}}}},"data access":{"updated":{},"created":{},"deleted":{"entity_type":{"changeType":"deleted","name":"entity_type","valueType":"string","description":"Type d'entité auquel s'appliquent les restrictions d'accès et conditions d'utilisation","meta":{"core":true,"displayName":"Type d'entité"},"restrictions":{"required":true,"codeList":["Study","Donnor ","Biospecimen","File"]}},"entity_id":{"changeType":"deleted","name":"entity_id","valueType":"string","description":"Identifiant unique pour l'entité","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID de l'entité","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"access_limitations":{"changeType":"deleted","name":"access_limitations","description":"Restrictions pour l'accès telles que définies dans l'ontologie DUO de GA4GH","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]},"meta":{"core":true,"displayName":"Restrictions pour l'accès","notes":"Référez-vous au code du Data Use Ontology https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"deleted","name":"access_requirements","description":"Conditions d'utilisation telles que définies dans l'ontologie DUO de GA4GH","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]},"meta":{"core":true,"displayName":"Conditions d'utilisation","notes":"Référez-vous au code du Data Use Ontology https://github.com/EBISPOT/DUO","examples":"DUO:0000021, DUO:0000025"}}}},"donor":{"updated":{},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Identifant unique pour l'étude","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_donor_id":{"changeType":"deleted","description":"Identifiant unique pour le donneur, soumis par l'étude","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"dob":{"changeType":"deleted","description":"Date de naissance du donneur","name":"dob","valueType":"string","meta":{"core":true,"notes":"Une date partielle peut être soumise; l'année de naissance étant le minimum acceptable","displayName":"Date de naissance"},"restrictions":{"required":true}},"date_of_recruitment":{"changeType":"deleted","description":"Date de recrutement du donneur","name":"date_of_recruitment","valueType":"string","meta":{"core":true,"displayName":"date de recrutement"},"restrictions":{"required":true}},"gender":{"changeType":"deleted","description":"Sexe du donneur","name":"gender","valueType":"string","restrictions":{"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Information obtenue des données médico-administrative ou déclarée par le donneur","displayName":"Genre"}},"ethnicity":{"changeType":"deleted","description":"Identité éthnique du donneur","name":"ethnicity","valueType":"string","restrictions":{"codeList":["French Canadian","English Canadian","Aboriginal","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixed","Other"]},"meta":{"displayName":"Ethnicité","notes":"Les Canadiens français désigne les Canadiens dont les ancêtres font partie des colons français venus s'installés au Canada. Les Canadiens anglais désigne les Canadiens anglophones d'ascendance et de culture anglaise. Autochtone (Premières Nations, Métis, Inuits), blancs (ascendance européenne), arabes (ex; Égypte, Irak, Jordanie, Liban) , Latino-américain (hispanique), noire (Afrique / Caraïbes), d'Asie de l'Est (ex: Chine, Japon, Corée, Taïwan), d'Asie occidentale (ex: Turquie, Iran, Afghanistan), Asie du Sud-Est (ex: Malaisie, Indonésie, Viet Nam), Asie du Sud (ex: Inde, Sri Lanka, Pakistan, Bangladesh), Philippin, Inconnu, Autre"}},"vital_status":{"changeType":"deleted","description":"Statut vital du donneur","name":"vital_status","restrictions":{"codeList":["Alive","Deceased","Unknown"],"required":true},"valueType":"string","meta":{"validationDependency":true,"core":true,"displayName":"Statut vital"}},"cause_of_death":{"changeType":"deleted","description":"Cause du décès","name":"cause_of_death","restrictions":{"codeList":["Cancer","Heart disease","Cerebrovascular disease","Accidental death","Chronic lower respiratory diseases","Influenza and pneumonia","Other reason","Unknown"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"]},"valueType":"string","meta":{"core":true,"dependsOn":"donor.vital_status","notes":"Requis si le donneur est décédé","displayName":"Cause du décès"}},"age_of_death":{"changeType":"deleted","description":"Age du donneur au moment de son décès (en jour)","name":"age_of_death","valueType":"integer","meta":{"dependsOn":"donor.vital_status","notes":"Requis si le donneur est décédé.","validationDependency":true,"units":"days","core":"true","displayName":"Age de décès"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"]}},"physical_measures_available":{"changeType":"deleted","description":"Indiquer si des mesures physiques sont disponibles pour ce donneur","name":"physical_measures_available","valueType":"boolean","meta":{"displayName":"Mesures physiques disponibles"}},"laboratory_measures_available":{"changeType":"deleted","description":"Indiquer si des résultats de laboratoire sont disponibles pour ce donneur","name":"laboratory_measures_available","valueType":"boolean","meta":{"displayName":"Résultats de laboratoire disponibles"}},"lifestyle_available":{"changeType":"deleted","description":"Indiquer si des données sur le habitudes de vie sont disponibles pour ce donneur","name":"lifestyle_available","valueType":"boolean","meta":{"displayName":"Habitudes de vie disponibles"}},"medication_available":{"changeType":"deleted","description":"Indiquer si des informations sur la prise de médicaments sont disponibles pour ce donneur","name":"medication_available","valueType":"boolean","meta":{"displayName":"Informations sur les médicaments disponibles"}},"environment_exposure_available":{"changeType":"deleted","description":"Indiquer si des données sur les expositions environnementales sont disponibles pour ce donneur","name":"environment_exposure_available","valueType":"boolean","meta":{"displayName":"Exposition environnementale disponibles"}},"family_history_available":{"changeType":"deleted","description":"Indiquer si des informations sur l'historique familial de santé sont disponibles pour ce donneur","name":"family_history_available","valueType":"boolean","meta":{"displayName":"Historique familial de santé"}},"genealogy_available":{"changeType":"deleted","description":"Indiquer si des données généalogiques sont disponibles pour ce donneur","name":"genealogy_available","valueType":"boolean","meta":{"displayName":"Données généalogiques disponibles"}},"is_a_proband":{"changeType":"deleted","description":"Indiquer si le donneur est un proband","name":"is_a_proband","restrictions":{"codeList":["Is a family member","Is a proband","Not applicable"]},"valueType":"string","meta":{"displayName":"Est un proband"}},"is_affected":{"changeType":"deleted","description":"Indiquer si le donneur est affecté par la conditon","name":"is_affected","restrictions":{"codeList":["Yes","No","Unknown","Not applicable"]},"valueType":"string","meta":{"displayName":"Est affecté"}}}},"biospecimen":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"submitter_biospecimen_id":{"description":{"left":"Identifiant unique pour le spécimen biologique, soumis par l'étude","right":"Identifiant unique pour le spécimen biologique soumis par l'étude"},"meta":{"displayName":{"left":"ID du biospécimen soumis par l'étude","right":"ID du spécimen biologique soumis par l'étude"}}},"tumor_normal_designation":{"description":{"left":"Le spécimen biologique provient de tissu tumoral ou normal","right":"Le spécimen biologique provient d'un tissu tumoral ou normal"},"meta":{"notes":{"left":null,"right":"Indiquez `Not applicable' si le spécimen biologique n'a pas été analysé."}},"restrictions":{"codeList":{"left":["Normal","Tumor"],"right":["Normal","Tumor","Not applicable"],"data":{"added":["Not applicable"],"deleted":[]}}}},"biospecimen_tissue_source":{"meta":{"notes":{"left":null,"right":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl Blood (NCIT:C12434), Saliva (NCIT:C13275), Solid Tissue Sample (NCIT:C164014), Bone Marrow (NCIT:C12431)"}},"restrictions":{"codeList":{"left":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"],"right":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431"],"data":{"added":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431"],"deleted":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"]}}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","description":"Identifiant pour le participant soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"age_biospecimen_collection":{"changeType":"created","description":"Âge du participant (en jours) au moment de la collecte du spécimen biologique","name":"age_biospecimen_collection","restrictions":{"range":{"min":0,"max":40000}},"valueType":"number","meta":{"units":"days","displayName":"Âge (en jours) au moment de la collecte du spécimen biologique"}},"cancer_biospecimen_type":{"changeType":"created","name":"cancer_biospecimen_type","valueType":"string","description":"Description du type de tissu d'où provient le spécimen biologique (spécifique au cancer), basé sur le  NCI Thesaurus (NCIt)","restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"],"codeList":["NCIT:C156445","NCIT:156440","NCIT:156441","NCIT:164032","NCIT:C18009","NCIT:C162623","NCIT:C156443"]},"meta":{"validationDependency":true,"core":true,"displayName":"Type de spécimen biologique (spécifique au cancer)","notes":"Les codes sont tirés du NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl Derived Cell Line (NCIT:C156445), Metastatic Tumor Sample (NCIT:156440), Sample Derived from New Primary (NCIT:156441), Tumor-Adjacent Normal Specimen (NCIT:164032), Tumor Tissue (NCIT:C18009), Normal Tissue Segment (NCIT:C162623), Cell Line-Derived Xenograft (NCIT:C156443)"}},"cancer_biospecimen_anatomic_location_source_text":{"changeType":"created","name":"cancer_biospecimen_anatomic_location_source_text","valueType":"string","description":"Site anatomique d'où le spécimen biologique a été collecté (spécifique) au cancer","restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]},"meta":{"validationDependency":true,"core":true,"notes":"Utilisez le terme inscrit au moment de la collecte du spécimen biologique","displayName":"Localisation anatomique du spécimen biologique (terme)","examples":"Breast"}},"biospecimen_anatomic_location_ncit_code":{"changeType":"created","name":"biospecimen_anatomic_location_ncit_code","valueType":"string","description":"Indiquer le code NCIT représentant la localisation anatomique du spécimen biologique","restrictions":{"regex":"^ncit:C\\d+$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]},"meta":{"validationDependency":true,"core":true,"notes":"Référez-vous au NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl","displayName":"Localisation anatomique du spécimen biologique (code)","examples":"NCIT:C12971"}},"tumor_histological_type_source_text":{"changeType":"created","name":"tumor_histological_type_source_text","description":"Histologie du néoplasme, selon le rapport de pathologie","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"Si le spécimen biologique est une tumeur, veuillez utiliser le terme fourni dans le rapport de pathologie","valueType":"string","examples":"Mucinous Adenocarcinoma","displayName":"Type histologique de la tumeur"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}},"tumor_histological_type_ncit_code":{"changeType":"created","name":"tumor_histological_type_ncit_code","description":"Code histologique du néoplasme selon le NCI Thesaurus (NCIt)","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"biospecimen.tumor_normal_designation","notes":"Si le spécimen biologique est une tumeur, référez-vous au NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl","valueType":"string","examples":"NCIT:C136709","displayName":"Tumor Histological Type"},"restrictions":{"regex":"^ncit:C\\d+$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","description":"Identifiant unique pour le donneur, soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_diagnosis_id":{"changeType":"deleted","name":"submitter_diagnosis_id","valueType":"string","description":"Indiquez le diagnosic associé au biospécimen","meta":{"primaryId":true,"validationDependency":true,"foreignKey":"diagnosis.submitter_diagnosis_id","displayName":"ID du diagnostic soumis par l'étude","notes":"non requis si le spécimen n'a pas été collecté pour des fins de diagnostic #/notes/id"},"restrictions":{"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"date_biospecimen_collection":{"changeType":"deleted","description":"Date de collecte du spécimen biologique","name":"date_biospecimen_collection","valueType":"string","meta":{"core":true,"notes":"Collected DateTime","displayName":"Date de collecte du spécimen biologique"},"restrictions":{"required":true}},"biospecimen_type":{"changeType":"deleted","name":"biospecimen_type","valueType":"string","description":"Description du type de tissu d'où provient le spécimen biologique","restrictions":{"required":true,"codeList":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"]},"meta":{"validationDependency":true,"core":true,"displayName":"Type de spécimen biologique"}},"biospecimen_anatomic_location":{"changeType":"deleted","name":"biospecimen_anatomic_location","valueType":"string","description":"Site anatomique d'où le spécimen biologique a éte collecté selon la classification topographique ICD-O-3","restrictions":{"required":true,"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"validationDependency":true,"core":true,"notes":"Veuillez vous référer aux lignes directrices du manuel ICD-O-3 à l'adresse suivante: https://apps.who.int/iris/handle/10665/42344","displayName":"Localisation anatomique du spécimen biologique","examples":"C50.1,C18"}},"tumor_histological_type":{"changeType":"deleted","name":"tumor_histological_type","description":"Code histologique (morphologie) du néoplasme selon la classification ICD-O-3 (International Classification of Diseases for Oncology, 3rd Edition) déclaré dans le rapport de pathologie","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"Si le spécimen biologique est une tumeur. Veuillez vous référer au manuel ICD-O-3 à l'adresse suivante https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Type histologique de la tumeur"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation.trim().toLowerCase();\n\n        if (!currField && tumorNormalDesignation.toLowerCase() === 'tumor') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is tumor.`,\n            };\n        }\n\n        return result;\n    })"]}},"biospecimen_processing":{"changeType":"deleted","name":"biospecimen_processing","valueType":"string","description":"Méthode de traitement du spécimen biologique","restrictions":{"codeList":["Cryopreservation in liquid nitrogen (dead tissue)","Cryopreservation in dry ice (dead tissue)","Cryopreservation of live cells in liquid nitrogen","Cryopreservation - other","Formalin fixed & paraffin embedded","Formalin fixed - buffered","Formalin fixed - unbuffered","Fresh","Other"]},"meta":{"displayName":"Traitement du biospécimen"}},"biospecimen_storage":{"changeType":"deleted","name":"biospecimen_storage","valueType":"string","description":"Méthode d'entreposage du spécimen biologique","restrictions":{"codeList":["Cut slide","Frozen in -70 freezer","Frozen in liquid nitrogen","Frozen in vapour phase","Not Applicable","Other","Paraffin block","RNA later frozen"]},"meta":{"notes":"Pour les spécimens biologiques frais ou qui ont été immédiatement mis en culture, veuillez indiquer - Not applicable - .","displayName":"Entreposage du biospécimen"}},"biospecimen_access":{"changeType":"deleted","name":"biospecimen_access","valueType":"boolean","description":"Possibilité d'avoir accès au spécimen biologique","restrictions":{"required":true},"meta":{"validationDependency":true,"core":true,"displayName":"Accès au biospécimen"}}}},"Diagnosis":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"diagnosis_source_text":{"description":{"left":"Le diagnostic du donneur tel que rapporté par l'étude","right":"Le diagnostic du participant tel que rapporté par l'étude"},"meta":{"core":{"left":null,"right":true}}},"diagnosis_ICD_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((C|c)7(A|a|B|b)|[A-Za-z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$","right":"^[A-TV-Z][0-9][0-9AB].?[0-9A-TV-Z]{0,4}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"diagnosis_mondo_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((M|m)(O|o)(N|n)(D|d)(O|o)_)[0-9]{7}$","right":"^(MONDO:)[0-9]{7}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"age_at_diagnosis":{"description":{"left":"Age au moment du diagnostic de la condition","right":"Âge du participant (en jours) au moment du diagnostic de la condition"},"valueType":{"left":"integer","right":"number"},"meta":{"units":{"left":"years","right":"days"},"displayName":{"left":"Age au diagnostic","right":"Âge (en jours) au diagnostic"}},"restrictions":{"required":{"left":true,"right":null},"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"],"right":null},"range":{"left":null,"right":{"min":0,"max":40000}}}},"is_cancer_primary":{"valueType":{"left":"boolean","right":"string"},"restrictions":{}},"stage_group":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const isCancer = parseInt($row.is_cancer);\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer === 1 && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumor_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumor_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumor_staging_system && $row.tumor_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumor_staging_system' is set to '${\n                    $row.tumor_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]}}},"t_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"n_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"m_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","valueType":"string","description":"Identifiant pour le participant soumis par l'étude","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"Submitter participant ID","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"tumor_staging_system":{"changeType":"created","name":"tumor_staging_system","valueType":"string","description":"Indiquer le système de stadification du cancer utilisé pour effectué le diagnostic primaire","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Système de stadification"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","valueType":"string","description":"Identifiant unique pour le donneur, soumis par l'étude","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_diagnosis_id":{"changeType":"deleted","name":"submitter_diagnosis_id","valueType":"string","description":"Identifiant unique pour le diagnostic du donneur, soumis par l'étude","meta":{"primaryId":true,"validationDependency":true,"foreignKey":"diagnosis.submitter_diagnosis_id","displayName":"ID du diagnostic soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"is_self_reported":{"changeType":"deleted","name":"is_self_reported","description":"Indiquer si le diagnostic est auto-déclaré (par le donneur)","valueType":"boolean","meta":{"displayName":"Est auto-déclaré"}},"diagnosis_type":{"changeType":"deleted","name":"diagnosis_type","description":"Indiquer si le diagnostic est basé sur des critères cliniques ou histologiques (histo-pathologique)","restrictions":{"codeList":["Clinical","Histological"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"valueType":"string","meta":{"dependsOn":"diagnosis.is_cancer","notes":"Cette information est requise si le diagnostic est un diagnostic de cancer","core":true,"displayName":"Type de diagnostic"}},"tumour_staging_system":{"changeType":"deleted","name":"tumour_staging_system","valueType":"string","description":"Indiquer le système de stadification du cancer utilisé pour effectué le diagnostic primaire","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Système de stadification"}}}},"treatment":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"submitter_diagnosis_id":{"description":{"left":"Identifiant unique du diagnostic qui est relié à ce traitement","right":"Identifiant du diagnostic qui est relié à ce traitement"}},"treatment_type":{"description":{"left":"Type de traitement reçu par le donneur","right":"Type de traitement reçu par le participant"}},"treatment_is_primary":{"description":{"left":"Indiquer si ce traitement est le traitement de première intention reçu par le donneur après son diagnostic","right":"Indiquer si ce traitement est le traitement de première intention reçu par le participant après son diagnostic"}},"treatment_response":{"description":{"left":"Indiquer la réponse du donneur à ce traitement","right":"Indiquer la réponse du participant à ce traitement"}},"medication_name":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"medication_code":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"medication_class":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"treatment_start_date":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"treatment_end_date":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","description":"Identifiant pour le participant soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","description":"Identifiant unique pour le donneur, soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_treatment_id":{"changeType":"deleted","name":"submitter_treatment_id","description":"Identifiant unique pour le traitement du donneur, soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du traitement soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"follow_up":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"submitter_diagnosis_id":{"description":{"left":"Identifiant unique pour le diagnostic du donneur, soumis par l'étude.","right":"Identifiant pour le diagnostic du participant soumis par l'étude"}},"days_to_follow_up":{"description":{"left":"Intervalle de temps (en jours) entre le diagnostic et la visite de suivi","right":"Nombre de jours entre le diagnostic et la visite de suivi"}},"relapse_interval":{"description":{"left":"Intervalle entre la fin du traitement de première intention et la progressiojn de la maladie (en jours)","right":"Intervalle entre la fin du traitement de première intention et la progression de la maladie (en jours)"},"meta":{"notes":{"left":"Ce champ indique la durée de l'intervalle sans maladie, en jours dans le cas où la maladie était non-détectée suite au traitement primaire, puis une rechute, une récidive ou une progression (pour les tumeurs liquides) s'est produite par la suite","right":"Ce champ indique la durée de l'intervalle sans maladie en jours dans le cas où la maladie était non-détectée suite au traitement primaire, puis une rechute, une récidive ou une progression (pour les tumeurs liquides) s'est produite par la suite"}}}},"created":{"submitter_participant_id":{"changeType":"created","description":"Identifiant pour le participant soumis par l'étude","name":"submitter_participant_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","description":"Identifiant unique pour le donneur, soumis par l'étude","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_follow_up_id":{"changeType":"deleted","description":"Identifiant unique pour la visite de suivi du donneur, soumis par l'étude ","name":"submitter_follow_up_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du suivi soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"exposure":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"smoking_status":{"description":{"left":"Statut tabagique du donneur au moment de la collecte de données","right":"Statut tabagique du participant au moment de la collecte de données"},"restrictions":{"codeList":{"left":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"],"right":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current heavy tobacco smoker (more than 20)","Current light tobacco smoker"],"data":{"added":["Current heavy tobacco smoker (more than 20)","Current light tobacco smoker"],"deleted":["Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"]}}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","valueType":"string","description":"Identifiant unique pour le participant soumis par l'étude","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","valueType":"string","description":"Identifiant unique pour le donneur, soumis par l'étude","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"smoking_pack_years":{"changeType":"deleted","name":"smoking_pack_years","description":"Nombre de paquets de cigarettes fumés par jour multiplié par le nombre d'année où le donneur a fumé ","valueType":"string","meta":{"dependsOn":"exposure.smoking_status","notes":"Non requis si l'historique de consommation de tabac est inconnu ou si le donneur n'a jamais fumé.Les paquets-années sont calculés en multipliant le nombre de paquets de cigarettes (20 cigarettes par paquet) fumés par jour par le nombre d'années que la personne a fumé. Par exemple, 1 paquet par an équivaut à fumer 1 paquet par jour pendant 1 an.","displayName":"Paquet-année de cigarettes"}}}},"phenotype":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"phenotype_source_text":{"description":{"left":"Le phenotype (ou anomalie) du donneur tel que rapporté par l'étude","right":"Le phenotype (ou anomalie) du participant tel que rapporté par l'étude"},"meta":{"core":{"left":null,"right":true}}},"phenotype_HPO_code":{"description":{"left":"Code du phénoype du donneur selon le système de classification Human Phenoytpe Ontology (HPO)","right":"Code du phénoype du participant selon le système de classification Human Phenoytpe Ontology (HPO)"},"meta":{"notes":{"left":"Fournissez le code exact tels qu'il apparait dans HPO (par example: HP:0001161. Veuillez-vous référer à https://hpo.jax.org/app/.","right":"Fournissez le code exact tel qu'il apparait dans HPO (par example: HP:0001161. Veuillez-vous référer à https://hpo.jax.org/app/."}},"restrictions":{"regex":{"left":"^((h|H)(p|P):)[0-9]{7}$","right":"^(HP:)[0-9]{7}$"}}},"age_at_phenotype":{"description":{"left":"Age (en jour) où le phénotype a été observé chez ce donneur","right":"Âge du participant (en jours) où le phénotype a été observé chez ce participant"},"valueType":{"left":"integer","right":"number"},"meta":{"core":{"left":true,"right":null},"displayName":{"left":"Age où le phénotype a été observé","right":"Âge (en jours) où le phénotype a été observé"}},"restrictions":{"required":{"left":true,"right":null},"range":{"left":null,"right":{"min":0,"max":40000}}}}},"created":{"submitter_participant_id":{"changeType":"created","name":"submitter_participant_id","description":"Identifiant pour le participant soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","name":"submitter_donor_id","description":"Identifiant unique pour le donneur, soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_phenotype_id":{"changeType":"deleted","name":"submitter_phenotype_id","description":"Identifiant unique pour le phénotype, soumis par l'étude","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du phénotype soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"phenotype_severity":{"changeType":"deleted","name":"phenotype_severity","valueType":"string","description":"Sévérité de la manifestation du phénotype","restrictions":{"codeList":["Borderline","Mild","Moderate","Severe","Profound"]},"meta":{"displayName":"Sévérité du phénotype"}}}},"family_relationship":{"updated":{},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Identifant unique pour l'étude","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_family_id":{"changeType":"deleted","name":"submitter_family_id","valueType":"string","description":"Identifant unique pour la famille du donneur, soumis par l'étude","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"ID de la famille soumis par l'étude","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"submitter_donor_id_1":{"changeType":"deleted","description":"Identifiant unique du donneur 1, soumis par l'étude","name":"submitter_donor_id_1","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du donneur 1 soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_donor_id_2":{"changeType":"deleted","description":"Identifiant unique du donneur 2, soumis par l'étude ","name":"submitter_donor_id_2","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du donneur 2 soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"family_type":{"changeType":"deleted","name":"family_type","description":"Type de groupe familiale auquel fait partie de le donneur","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Type de groupe familial"}},"family_1_2_relationship":{"changeType":"deleted","name":"family_1_2_relationship","description":"Relation du donneur 1 envers le donneur 2","valueType":"string","restrictions":{"required":true,"codeList":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]},"meta":{"core":true,"displayName":"Relation du donneur 1 envers le donneur 2"}},"family_2_1_relationship":{"changeType":"deleted","name":"family_2_1_relationship","description":"Relation du donneur 2 envers le donneur 1","valueType":"string","restrictions":{"required":true,"codeList":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]},"meta":{"core":true,"displayName":"Relation du donneur 2 envers le donneur 1"}}}},"family_history":{"updated":{"study_id":{"description":{"left":"Identifant unique pour l'étude","right":"Identifant pour l'étude"}},"family_condition_name":{"description":{"left":"Nom de la condition médicale observée dans la famille du donneur","right":"Nom de la condition médicale observée dans la famille du participant"}},"family_condition_relationship":{"description":{"left":"Quelle est la relation de ce membre de la famille envers le donneur.","right":"Quelle est la relation de ce membre de la famille envers le participant."},"meta":{"notes":{"left":"Référez-vous au système de code HL7 pour identifier un type de relation entre le donneur et le membre affecté de sa famille http://terminology.hl7.org/CodeSystem/v3-RoleCode","right":"Référez-vous au système de code HL7 pour identifier un type de relation entre le participant et le membre affecté de sa famille http://terminology.hl7.org/CodeSystem/v3-RoleCode"}}}},"created":{"submitter_participant_id":{"changeType":"created","description":"Identifiant pour le participant soumis par l'étude","name":"submitter_participant_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}},"deleted":{"submitter_donor_id":{"changeType":"deleted","description":"Identifiant unique pour le donneur, soumis par l'étude","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"donor.submitter_donor_id","displayName":"ID du donneur soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_family_condition_id":{"changeType":"deleted","name":"submitter_family_condition_id","valueType":"string","description":"Identifiant unique pour la condition médicale observée dans la famille du donneur, soumis par l'étude ","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"ID de la condition médicale d'un membre de la famille","validationDependency":true,"primaryId":true,"notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"family_condition_age":{"changeType":"deleted","name":"family_condition_age","description":"Age du membre de la famille affecté lorsque la condition a été observée","valueType":"integer","meta":{"units":"years","displayName":"Age du membre de la famille lorsque la condition a été observée"}},"family_cancer_history":{"changeType":"deleted","name":"family_cancer_history","description":"Indiquer si le donneur a une histoire familiale de cancer","restrictions":{"codeList":["Yes","No","Unknown"],"required":true},"valueType":"string","meta":{"core":true,"displayName":"Histoire familiale de cancer"}}}},"participant":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Identifant pour l'étude","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_participant_id":{"changeType":"created","description":"Identifiant unique pour le participant soumis par l'étude","name":"submitter_participant_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"participant.submitter_participant_id","displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"age_at_recruitment":{"changeType":"created","description":"Âge (en jours) du participant au moment du recrutement","name":"age_at_recruitment","valueType":"number","meta":{"core":true,"displayName":"Âge (en jours) au recrutement","units":"days"},"restrictions":{"range":{"min":0,"max":40000},"required":false}},"sex":{"changeType":"created","description":"Sexe du participant","name":"sex","valueType":"string","restrictions":{"required":true,"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Information obtenue des données médico-administratives ou déclarée par le participant","displayName":"Sexe"}},"ethnicity":{"changeType":"created","description":"Identité éthnique du participant","name":"ethnicity","valueType":"string","restrictions":{"codeList":["French Canadian","English Canadian","First Nation, Inuit, Metis","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixed","Other"]},"meta":{"displayName":"Ethnicité","notes":"Les Canadiens français désignent les Canadiens dont les ancêtres font partie des colons français venus s'installer au Canada. Les Canadiens anglais désignent les Canadiens anglophones d'ascendance et de culture anglaise."}},"vital_status":{"changeType":"created","description":"Statut vital du participant","name":"vital_status","restrictions":{"codeList":["Alive","Deceased","Unknown"],"required":true},"valueType":"string","meta":{"validationDependency":true,"core":true,"displayName":"Statut vital"}},"cause_of_death":{"changeType":"created","description":"Cause du décès","name":"cause_of_death","restrictions":{"codeList":["Cancer","Heart disease","Cerebrovascular disease","Accidental death","Chronic lower respiratory diseases","Influenza and pneumonia","Other reason","Unknown"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the participant's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"]},"valueType":"string","meta":{"core":true,"dependsOn":"participant.vital_status","notes":"Requis si le participant est décédé","displayName":"Cause du décès"}},"age_of_death":{"changeType":"created","description":"Âge du participant (en jours) au moment de son décès","name":"age_of_death","valueType":"number","meta":{"dependsOn":"participant.vital_status","notes":"Requis si le participant est décédé.","validationDependency":true,"units":"days","core":true,"displayName":"Âge (en jours) du décès"},"restrictions":{"range":{"min":0,"max":40000},"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the participant's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"]}}},"deleted":{}},"family":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Identifant pour l'étude","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_family":{"changeType":"created","name":"submitter_family","valueType":"string","description":"Identifant pour la famille du participant soumis par l'étude","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"ID de la famille soumis par l'étude","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."}},"submitter_participant_id":{"changeType":"created","description":"Identifiant unique du participant soumis par l'étude","name":"submitter_participant_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"ID du participant soumis par l'étude","notes":"Les caractères alphanumériques ainsi que les points, tirets et barres de soulignement sont supportés.  Maximum de 250 caractères."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"family_type":{"changeType":"created","name":"family_type","description":"Type de groupe familial auquel fait partie le participant","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Type de groupe familial"}},"relationship_to_proband":{"changeType":"created","name":"relationship_to_proband","description":"Relation du participant envers le sujet proposant","valueType":"string","restrictions":{"required":true,"codeList":["Is the proband","Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter"]},"meta":{"core":true,"displayName":"Relation du participant envers le sujet proposant"}},"is_affected":{"changeType":"created","name":"is_affected","description":"Est affecté par la condition","valueType":"string","restrictions":{"codeList":["Yes","No","Unknown"]},"meta":{"displayName":"Est affecté par la condition"}}},"deleted":{}}}}
