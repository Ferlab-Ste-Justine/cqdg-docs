{"schemas":{"sample_registration":{"updated":{"study_id":{"description":{"left":"Identifier for the Study.","right":"Identifier for the Study"}},"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider.","right":"Identifier of the participant assigned by the data provider."}},"submitter_biospecimen_id":{"description":{"left":"Identifier of the biospecimen, assigned by the data provider.","right":"Identifier of the biospecimen assigned by the data provider."}},"submitter_sample_id":{"description":{"left":"Unique identifier of the molecular sample, assigned by the data provider","right":"Unique identifier of the molecular sample assigned by the data provider"}},"sample_type":{"meta":{"notes":{"left":null,"right":"Codes are taken from NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl DNA (NCIT:C449), Ribonucleic Acid (NCIT:C812)"}},"restrictions":{"codeList":{"left":["DNA","RNA"],"right":["NCIT:C449","NCIT:C812"],"data":{"added":["NCIT:C449","NCIT:C812"],"deleted":["DNA","RNA"]}}}}},"created":{},"deleted":{}},"study":{"updated":{"access_authority":{"description":{"left":"Contact information for the Stuy's access authority","right":"Contact information for the Stuy's Access Authority"},"meta":{"displayName":{"left":"Access authority","right":"Access Authority"}}},"population":{"restrictions":{"codeList":{"left":["Pediatric","Adult","Pediatric and adult"],"right":["Pediatric","Adult","Pediatric and Adult"],"data":{"added":["Pediatric and Adult"],"deleted":["Pediatric and adult"]}}}},"access_limitations":{"meta":{"notes":{"left":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO","right":"Refer to the Data Use Ontology https://github.com/EBISPOT/DUO"}}},"access_requirements":{"meta":{"notes":{"left":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO","right":"Refer to the Data Use Ontology for the full description https://github.com/EBISPOT/DUO"}},"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000017\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\"\n          ];\n        \n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false, \n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n        \n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000012\",\n            \"DUO:0000015\",\n            \"DUO:0000016\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\",\n            \"DUO:0000043\",\n            \"DUO:0000044\",\n            \"DUO:0000045\",\n            \"DUO:0000046\",\n            \"Biospecimen Access\"\n          ];\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false,\n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n\n        return result;\n    })"]},"codeList":{"right":["DUO:0000012","DUO:0000015","DUO:0000016","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029","DUO:0000043","DUO:0000044","DUO:0000045","DUO:0000046","Biospecimen Access"],"data":["DUO:0000012","DUO:0000015","DUO:0000016","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029","DUO:0000043","DUO:0000044","DUO:0000045","DUO:0000046","Biospecimen Access"]}}}},"created":{"data_source":{"changeType":"created","name":"data_source","valueType":"string","description":"Describes the main source of the data collected from study participants","restrictions":{"required":true},"meta":{"core":true,"displayName":"Data source"}},"selection_criteria":{"changeType":"created","name":"selection_criteria","valueType":"string","description":"Inclusion and exclusion criteria for the study","restrictions":{"required":true},"meta":{"core":true,"displayName":"Selection criteria"}},"publication":{"changeType":"created","name":"publication","valueType":"string","description":"Digital Object Identifier of the journal article that describes the study's methodology and rational ","restrictions":{"required":true},"meta":{"core":true,"notes":"Provide a DOI URL formatted as https://doi.org/ followed by the DOI number.","displayName":"Publication"}}},"deleted":{"biospecimen_access":{"changeType":"deleted","name":"biospecimen_access","valueType":"boolean","description":"Biospecimen may be accessed (consent type)","restrictions":{"required":true},"meta":{"validationDependency":true,"core":true,"displayName":"Biospecimen access"}}}},"participant":{"updated":{"submitter_participant_id":{"description":{"left":"Unique identifier of the participant, assigned by the data provider","right":"Unique identifier of the participant assigned by the data provider"}},"age_at_recruitment":{"description":{"left":"participant's age (in days) at recruitment","right":"Participant's age (in days) at recruitment"},"meta":{"displayName":{"left":"Age of participant at recruitment","right":"Age of participant (in days) at recruitment"}},"restrictions":{"required":{"left":true,"right":false}}},"ethnicity":{"meta":{"notes":{"left":"French Canadian trace their ancestry to French colonists who settled in Canada, English Canadians are of English ethnic origin and heritage, Aboriginal (First Nations, Metis, Inuit), White (European descent), Arab (e.g. Egypt, Iraq, Jordan, Lebanon), Latin American (Hispanic), Black (African/Caribbean), East Asian (e.g. China, Japan, Korea, Taiwan), West Asian (e.g. Turkey, Iran, Afghanistan), Southeast Asian (e.g. Malaysia, Indonesia, Viet Nam), South Asian (e.g. India, Sri Lanka, Pakistan, Bangladesh), Filipino, Unknown, Other","right":"French Canadian trace their ancestry to French colonists who settled in Canada, English Canadians are of English ethnic origin and heritage."}}},"vital_status":{"description":{"left":"participant's last known state of living or deceased","right":"Participant's last known state of living or deceased"}},"age_of_death":{"description":{"left":"Numeric value to represent the age of the participant at the time of death, in days","right":"Participant's age (in days) at the time of death"},"meta":{"notes":{"left":"Age_of_death is only required to be submitted if the participant's vital_status is Deceased.","right":"Age_of_death is only required to be submitted if the participant's vital_status is 'Deceased'."},"core":{"left":"true","right":true}},"restrictions":{"required":{"left":true,"right":null}}}},"created":{"gender":{"changeType":"created","description":"Gender of the participant","name":"gender","valueType":"string","restrictions":{"required":true,"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Data from administrative health records or self-reported","displayName":"Gender"}}},"deleted":{"sex":{"changeType":"deleted","description":"Sex of the participant","name":"sex","valueType":"string","restrictions":{"required":true,"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Data from administrative health record, medical record or self-reported","displayName":"Sex"}}}},"biospecimen":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"submitter_biospecimen_id":{"description":{"left":"Unique identifier of the biospecimen, assigned by the data provider","right":"Unique identifier of the biospecimen assigned by the data provider"}},"age_biospecimen_collection":{"description":{"left":"Age (in days) of participant when biospecimen was collected","right":"Participant's age (in days) when biospecimen was collected"},"restrictions":{"range":{"left":{"min":0,"max":4000},"right":{"min":0,"max":40000}}}},"biospecimen_tissue_source":{"meta":{"notes":{"left":"Terms are taken from NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl","right":"Codes are taken from NCI Thesaurus (NCIt) http://purl.obolibrary.org/obo/ncit.owl Blood (NCIT:C12434), Saliva (NCIT:C13275), Solid Tissue Sample (NCIT:C164014), Bone Marrow (NCIT:C12431), Umbilical Cord (NCIT:C34320), Umbilical Cord Blood (NCIT:C34320)"}},"restrictions":{"codeList":{"left":["Blood","Bone marrow","Saliva","Solid tissue"],"right":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431","NCIT:C13300","NCIT:C34320","Unknown"],"data":{"added":["NCIT:C12434","NCIT:C13275","NCIT:C164014","NCIT:C12431","NCIT:C13300","NCIT:C34320","Unknown"],"deleted":["Blood","Bone marrow","Saliva","Solid tissue"]}}}},"cancer_biospecimen_type":{"meta":{"notes":{"left":null,"right":"Codes are taken from NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl Derived Cell Line (NCIT:C156445), Metastatic Tumor Sample (NCIT:156440), Sample Derived from New Primary (NCIT:156441), Tumor-Adjacent Normal Specimen (NCIT:164032), Tumor Tissue (NCIT:C18009), Normal Tissue Segment (NCIT:C162623), Cell Line-Derived Xenograft (NCIT:C156443)"}},"restrictions":{"required":{"left":true,"right":null},"codeList":{"left":["Derived Cell Line","Metastatic Tumor Sample","Sample Derived from New Primary","Tumor-Adjacent Normal Specimen","Tumor Tissue","Normal Tissue Segment","Cell Line-Derived Xenograft"],"right":["NCIT:C156445","NCIT:156440","NCIT:156441","NCIT:164032","NCIT:C18009","NCIT:C162623","NCIT:C156443"],"data":{"added":["NCIT:C156445","NCIT:156440","NCIT:156441","NCIT:164032","NCIT:C18009","NCIT:C162623","NCIT:C156443"],"deleted":["Derived Cell Line","Metastatic Tumor Sample","Sample Derived from New Primary","Tumor-Adjacent Normal Specimen","Tumor Tissue","Normal Tissue Segment","Cell Line-Derived Xenograft"]}},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"cancer_biospecimen_anatomic_location_source_text":{"restrictions":{"required":{"left":true,"right":null},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"cancer_biospecimen_anatomic_location_ncit_code":{"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":"^ncit:C\\d+$"},"script":{"left":null,"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"tumor_histological_type_source_text":{"restrictions":{"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":null},"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}},"tumor_histological_type_ncit_code":{"description":{"left":"The code to represent the histology of neoplasms that is usually obtained from a pathology report, according to NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl","right":"The code to represent the histology of neoplasms according to NCI Thesaurus (NCIt)"},"meta":{"notes":{"left":"If biospecimen is a tumor refer to  NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl","right":"If biospecimen is a tumor refer to NCI Thesaurus (NCIt) at http://purl.obolibrary.org/obo/ncit.owl"}},"restrictions":{"regex":{"left":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","right":"^ncit:C\\d+$"},"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorNormalDesignation = $row.tumor_normal_designation || '';\n        const tumorNormalDesignationLowered = tumorNormalDesignation.trim().toLowerCase();\n\n        if (!currField && (tumorNormalDesignationLowered === 'tumor' || tumorNormalDesignationLowered === 'normal')) {\n            return {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumor_normal_designation is Tumor or Normal.`,\n            };\n        }\n\n        return { valid: true, message: 'Ok' };\n    })"]}}}},"created":{},"deleted":{}},"Diagnosis":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"age_at_diagnosis":{"description":{"left":"Age (in days) at diagnosis of condition","right":"Participant's age (in days) at diagnosis of condition"}},"stage_group":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumor_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumor_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumor_staging_system && $row.tumor_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumor_staging_system' is set to '${\n                    $row.tumor_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"treatment":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"treatment_start_date":{"meta":{"notes":{"left":"For medication, provide date of first prescription dispensation (MM-YYYY). For one-time treatments, such as surgeries, provide the date of the intervention.","right":"For medication, provide date of first prescription dispensation (DD-MM-YYYY). For one-time treatments, such as surgeries, provide the date of the intervention."}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"submitter_diagnosis_id":{"description":{"left":"Identifier of the diagnosis event, assigned by the data provider.","right":"Identifier of the diagnosis event assigned by the data provider."}},"days_to_follow_up":{"description":{"left":"Time interval between primary diagnosis and follow-up event","right":"Number of days between primary diagnosis and follow-up event"}},"disease_status_at_followup":{"meta":{"displayName":{"left":"Disease Status at Follow-Up","right":"Disease status at follow-up"}}}},"created":{},"deleted":{}},"exposure":{"updated":{"submitter_participant_id":{"description":{"left":"Unique identifier of the participant, assigned by the data provider","right":"Unique identifier of the participant assigned by the data provider"}},"smoking_status":{"restrictions":{"codeList":{"left":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"],"right":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current heavy tobacco smoker (more than 20)","Current light tobacco smoker"],"data":{"added":["Current heavy tobacco smoker (more than 20)","Current light tobacco smoker"],"deleted":["Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"]}}}}},"created":{},"deleted":{}},"phenotype":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"age_at_phenotype":{"description":{"left":"Age (in days) of partipant when phenotype was observed","right":"Participant's age (in days) when phenotype was observed"}}},"created":{},"deleted":{}},"family":{"updated":{"submitter_family_id":{"description":{"left":"Identifier of the family, assigned by the data provider","right":"Identifier of the family assigned by the data provider"}},"submitter_participant_id":{"description":{"left":"Unique identifier of the participant, assigned by the data provider","right":"Unique identifier of the participant assigned by the data provider"}}},"created":{},"deleted":{}},"family_history":{"updated":{"submitter_participant_id":{"description":{"left":"Identifier of the participant, assigned by the data provider","right":"Identifier of the participant assigned by the data provider"}},"family_condition_relationship":{"meta":{"notes":{"left":"Refer to HL7 code system to identify the type of relation between the participant and affected family member http://terminology.hl7.org/CodeSystem/v3-RoleCode","right":"Refer to HL7 code system to identify the type of relationship between the participant and the affected family member http://terminology.hl7.org/CodeSystem/v3-RoleCode"}}}},"created":{},"deleted":{}},"dataset":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"dataset_name":{"changeType":"created","name":"dataset_name","valueType":"string","description":"Full name of the Dataset","restrictions":{"required":true},"meta":{"core":true,"displayName":"Full name of the Dataset"}},"dataset_description":{"changeType":"created","name":"dataset_description","valueType":"string","description":"Brief description of the Dataset","restrictions":{"required":true},"meta":{"core":true,"notes":"Provide information on the goal, experimental strategy and selection criteria for this dataset","displayName":"Brief description of the Dataset"}}},"deleted":{}}}}
