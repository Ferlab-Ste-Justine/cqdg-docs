{"schemas":{"study":{"updated":{"short_name":{"restrictions":{}}},"created":{},"deleted":{}},"data access":{"updated":{"access_requirements":{"meta":{"examples":{"left":null,"right":"DUO:0000021;DUO:0000025"}},"restrictions":{"codeList":{"left":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"],"data":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000017\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\"\n          ];\n        \n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim() : $field;\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (!list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false, \n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n        \n        return result;\n    })"]}}}},"created":{},"deleted":{}},"donor":{"updated":{"gender":{"restrictions":{"required":{"left":null,"right":true}}},"age_of_death":{"valueType":{"left":"integer","right":"number"},"meta":{"units":{"left":"days","right":"years"}}}},"created":{},"deleted":{}},"biospecimen":{"updated":{"biospecimen_type":{"restrictions":{"codeList":{"left":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"right":["Cell line - derived from normal","Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Normal","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"data":{"added":["Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line"],"deleted":["Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line"]}}}}},"created":{"tumor_normal_designation":{"changeType":"created","name":"tumor_normal_designation","valueType":"string","description":"Description of specimen tumor/normal status for data processing","restrictions":{"required":true,"codeList":["Normal","Tumor","Not applicable"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumor Normal Designation","notes":"Indicate `Not applicable' if the biospecimen was not analysed."}},"tumor_histological_type":{"changeType":"created","name":"tumor_histological_type","description":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3)","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"If biospecimen is a tumor, Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Tumor Histological Type"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"]}}},"deleted":{"tumour_normal_designation":{"changeType":"deleted","name":"tumour_normal_designation","valueType":"string","description":"Description of specimen tumour/normal status for data processing","restrictions":{"required":true,"codeList":["Normal","Tumour","Not applicable"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumour Normal Designation","notes":"Indicate `Not applicable' if the biospecimen was not analysed."}},"tumour_histological_type":{"changeType":"deleted","name":"tumour_histological_type","description":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3)","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumour_normal_designation","notes":"If biospecimen is a tumour, Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Tumour Histological Type"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"]}}}},"Diagnosis":{"updated":{"diagnosis_source_text":{"meta":{"core":{"left":null,"right":true}}},"diagnosis_ICD_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((C|c)7(A|a|B|b)|[A-Za-z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$","right":"^[A-TV-Z][0-9][0-9AB].?[0-9A-TV-Z]{0,4}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"diagnosis_mondo_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((M|m)(O|o)(N|n)(D|d)(O|o)_)[0-9]{7}$","right":"^(MONDO:)[0-9]{7}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"age_at_diagnosis":{"valueType":{"left":"integer","right":"number"},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"],"right":null},"range":{"left":null,"right":{"min":0,"max":100}}}},"stage_group":{"description":{"left":"Stage group of the tumour, as assigned by the reporting tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)","right":"Stage group of the tumor, as assigned by the reporting tumor_staging_system, that indicates the overall prognostic tumor stage (ie. Stage I, Stage II, Stage III etc.)"},"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is dependent on the selected tumour_staging_system","right":"This field is dependent on the selected tumor_staging_system"}}},"t_category":{"description":{"left":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual","right":"The code to represent the extent of the primary tumor (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual"},"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}}},"n_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}}},"m_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}}}},"created":{"tumor_staging_system":{"changeType":"created","name":"tumor_staging_system","valueType":"string","description":"Indicate the tumor staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumor Staging System"}}},"deleted":{"tumour_staging_system":{"changeType":"deleted","name":"tumour_staging_system","valueType":"string","description":"Indicate the tumour staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumour Staging System"}}}},"follow_up":{"updated":{"relapse_interval":{"meta":{"notes":{"left":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","right":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumors) occurred afterwards, then this field will indicate the length of disease free interval, in days."}}}},"created":{},"deleted":{}},"phenotype":{"updated":{"phenotype_source_text":{"meta":{"core":{"left":null,"right":true}}},"phenotype_HPO_code":{"restrictions":{"regex":{"left":"^((h|H)(p|P):)[0-9]{7}$","right":"^(HP:)[0-9]{7}$"}}},"age_at_phenotype":{"valueType":{"left":"integer","right":"number"},"meta":{"units":{"left":"days","right":"years"},"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null}}}},"created":{},"deleted":{}},"sample_registration":{"updated":{},"created":{"sample_type":{"changeType":"created","description":"Type of molecular sample used for analysis testing","name":"sample_type","valueType":"string","restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"]},"meta":{"core":true,"displayName":"Sample type"}}},"deleted":{}}}}
