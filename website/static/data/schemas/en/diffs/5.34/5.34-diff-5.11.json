{"schemas":{"sample_registration":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}},"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_sample_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}},"created":{"sample_type":{"changeType":"created","description":"Type of molecular sample used for analysis testing","name":"sample_type","valueType":"string","restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"]},"meta":{"core":true,"displayName":"Sample type"}}},"deleted":{}},"study":{"updated":{"study_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":null}}}},"created":{"website":{"changeType":"created","name":"website","valueType":"string","description":"Website of the Study","meta":{"displayName":"Website of the Study"}},"access_limitations":{"changeType":"created","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO and provide a semicolon (;) delimited list of requirements "}},"access_requirements":{"changeType":"created","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO and provide a semicolon (;) delimited list of requirements","examples":"Ethics approval required (DUO:0000021); Time limit on use (DUO:0000025)"}}},"deleted":{"access_authority":{"changeType":"deleted","name":"access_authority","valueType":"string","description":"Contact information for the Stuy's access authority","meta":{"displayName":"Access authority","notes":"Provide website or email information"}}}},"data access":{"updated":{},"created":{},"deleted":{"entity_type":{"changeType":"deleted","name":"entity_type","valueType":"string","description":"Type of entity to which access limitations and requirements apply","meta":{"core":true,"displayName":"Entity type"},"restrictions":{"required":true,"codeList":["Study","Donnor ","Biospecimen","File"]}},"entity_id":{"changeType":"deleted","name":"entity_id","valueType":"string","description":"Unique identifier for the entity","meta":{"validationDependency":true,"primaryId":true,"displayName":"Entity ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"access_limitations":{"changeType":"deleted","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"deleted","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}}}},"donor":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"ethnicity":{"restrictions":{"codeList":{"left":["French Canadian","English Canadian","Aboriginal","European","Arab","Latin American","African or Caribbean","East and Southeast Asian","South Asian","Mixed","Other"],"right":["French Canadian","English Canadian","Aboriginal","White","Arab","Latin American","Black","East Asian","West Asian","Southeast Asian","South Asian","Filipino","Unknown","Other"],"data":{"added":["White","Black","East Asian","West Asian","Southeast Asian","Filipino","Unknown"],"deleted":["European","African or Caribbean","East and Southeast Asian","Mixed"]}}}},"cause_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}}},"age_of_death":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n        if (!$field && vitalStatus.toLowerCase() === 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the donor's vital_status is deceased.`,\n            };\n        } else if ($field && vitalStatus.toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n            };\n        }\n        return result;\n    })"],"right":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}}}},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"biospecimen":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_biospecimen_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"not required if the biospecimen was not collected for a diagnostic purpose #/notes/id","right":"not required if the biospecimen was not collected for a diagnostic purpose #/notes/submitter_id"}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"biospecimen_tissue_source":{"restrictions":{"codeList":{"left":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"],"right":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"],"data":{"added":["Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"],"deleted":[]}}}}},"created":{"tumor_normal_designation":{"changeType":"created","name":"tumor_normal_designation","valueType":"string","description":"Description of specimen tumor/normal status for data processing","restrictions":{"required":true,"codeList":["Normal","Tumor"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumor Normal Designation"}},"tumor_histological_type":{"changeType":"created","name":"tumor_histological_type","description":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3)","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"If biospecimen is a tumor, Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Tumor Histological Type"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$"}}},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"tumour_normal_designation":{"changeType":"deleted","name":"tumour_normal_designation","valueType":"string","description":"Description of specimen tumour/normal status for data processing","restrictions":{"required":true,"codeList":["Normal","Tumour"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumour Normal Designation"}},"tumour_histological_type":{"changeType":"deleted","name":"tumour_histological_type","description":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3)","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumour_normal_designation","notes":"If biospecimen is a tumour, Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344","valueType":"string","examples":"8260/3,9691/36","displayName":"Tumour Histological Type"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$","script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation.trim().toLowerCase();\n\n        if (!currField && tumourNormalDesignation.toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"]}}}},"Diagnosis":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"diagnosis_source_text":{"meta":{"notes":{"left":"Provide exact information as per the dataset","right":"Provide exact information as per the dataset if coding to ICD-10 or MONDO ontologies is not possible"}}},"age_at_diagnosis":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        try {\n            const currField = parseFloat($field);\n            if (currField >= 101) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be between 0 and 100, optionally with decimal.`,\n                };\n            }\n        } catch (err) {\n            result = {\n                valid: false,\n                message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n            };\n        }\n\n        return result;\n    })"],"right":null}}},"diagnosis_type":{"description":{"left":"Indicate if the diagnosis is based on clinical or histological (histo-pathological) criteria","right":"Basis of diagnosis"},"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"tumour_staging_system":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = parseInt($row.is_cancer);\n\n        if (!currField && isCancer === 1) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"t_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"n_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"m_category":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n        if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"],"right":null}}}},"created":{"diagnosis_ICD_category":{"changeType":"created","name":"diagnosis_ICD_category","valueType":"string","description":"Disease category as defined in the WHO ICD-10","restrictions":{"required":true},"meta":{"core":true,"examples":"Neoplasms, Diseases of the nervous system","notes":"This refers to the body systems chapters of the WHO ICD-10, https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","displayName":"ICD-10 Disease category"}},"diagnosis_ICD_term":{"changeType":"created","name":"diagnosis_ICD_term","valueType":"string","description":"ICD-10 code and term used to define a condtion","restrictions":{"required":true},"meta":{"core":true,"examples":"C41.1: Malignant neoplasms of mandible, C16.9: Malignant neoplasm of stomach, unspecified","notes":"Write the full term used in ICD-10 followed by the code in parenthesis, for instance: malignant neoplasm of the breast (C50). For WHO ICD-10 codes, refer to https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","displayName":"Diagnosis ICD-10 code and term"}},"diagnosis_mondo_term":{"changeType":"created","name":"diagnosis_mondo_term","valueType":"string","description":"Mondo code and term used to define a condtion","restrictions":{"required":true},"meta":{"core":true,"examples":"MONDO_0002131: jaw cancer, MONDO_0001056: gastric cancer","notes":"Write the full term used in MONDO followed by the code in parenthesis, for instance: breast cancer (0007254). For MONDO codes, refer to https://www.ebi.ac.uk/ols/ontologies/mondo","displayName":"Diagnosis Mondo code and term"}},"clinical_stage_group":{"changeType":"created","name":"clinical_stage_group","description":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"]},"meta":{"dependsOn":"diagnosis.tumour_staging_system","notes":"This field is dependent on the selected tumour_staging_system","displayName":"Stage Group"}}},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"diagnosis_ICD_code":{"changeType":"deleted","name":"diagnosis_ICD_code","valueType":"string","description":"ICD-10 code used to define a condtion","restrictions":{"required":true,"regex":"^((C|c)7(A|a|B|b)|[A-Za-z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$"},"meta":{"core":true,"examples":"C41.1, C16.9","notes":"Write the exact ICD-10 code - refer to https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","displayName":"Diagnosis ICD-10 code"}},"diagnosis_mondo_code":{"changeType":"deleted","name":"diagnosis_mondo_code","valueType":"string","description":"Mondo code used to define a condtion","restrictions":{"required":true,"regex":"^((M|m)(O|o)(N|n)(D|d)(O|o)_)[0-9]{7}$"},"meta":{"core":true,"examples":"MONDO_0002131, MONDO_0001056","notes":"Write the exact MONDO code. For MONDO codes, refer to https://www.ebi.ac.uk/ols/ontologies/mondo","displayName":"Diagnosis Mondo code"}},"stage_group":{"changeType":"deleted","name":"stage_group","description":"Stage group of the tumour, as assigned by the reporting tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const isCancer = parseInt($row.is_cancer);\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer === 1 && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.tumour_staging_system","notes":"This field is dependent on the selected tumour_staging_system","displayName":"Stage Group"}}}},"treatment":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_treatment_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"treatment_type":{"meta":{"examples":{"left":null,"right":"Chemotherapy|Hormonal therapy"}},"restrictions":{"codeList":{"left":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmacotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"right":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmarcotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"],"data":{"added":["Other pharmarcotherapy"],"deleted":["Other pharmacotherapy"]}}}},"treatment_response":{"restrictions":{"codeList":{"left":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatment cessation due to toxicity","Improvement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"right":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatement cessation due to toxicity","Impovement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"],"data":{"added":["Treatement cessation due to toxicity","Impovement of symptoms"],"deleted":["Treatment cessation due to toxicity","Improvement of symptoms"]}}}},"medication_name":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"medication_code":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null}}},"medication_class":{"restrictions":{"script":{"left":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"right":null},"regex":{"left":"^[ABCDGHJLMNPRSV][0-9]{2}[A-Z]{2}[0-9]{2}$","right":null}}}},"created":{"medication_start_date":{"changeType":"created","description":"Date of the first prescription dispensation (MM-YYYY)","name":"medication_start_date","valueType":"string","meta":{"notes":"For self-reported information provide date when stopped taking the Rx.","dependsOn":"treatment.treatment_type","displayName":"Medication start date"}},"medication_end_date":{"changeType":"created","description":"Date of the last prescription dispensation (MM-YYYY)","name":"medication_end_date","valueType":"string","meta":{"notes":"For self-reported information provide date when stopped taking the Rx.","dependsOn":"treatment.treatment_type","displayName":"Medication end date"}}},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"treatment_start_date":{"changeType":"deleted","description":"Date when treatment started (DD-MM-YYYY)","name":"treatment_start_date","valueType":"string","meta":{"notes":"For medication, provide date of first prescription dispensation (MM-YYYY). For one-time treatments, such as surgeries, provide the date of the intervention.","displayName":"Treatment start date"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"],"regex":"^[ABCDGHJLMNPRSV][0-9]{2}[A-Z]{2}[0-9]{2}$"}},"treatment_end_date":{"changeType":"deleted","description":"Date when treatment ended (DD-MM-YYYY)","name":"treatment_end_date","valueType":"string","meta":{"notes":"For medication, provide date of last prescription dispensation (DD-MM-YYYY). Leave blank for one-time treatments such as sugeries.","displayName":"Treatment end date"},"restrictions":{"script":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type.trim().toLowerCase();\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentTypes.includes(treatmentType)) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}}},"follow_up":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_diagnosis_id":{"description":{"left":"Unique identifier of the diagnosis event, assigned by the data provider.","right":"Indicate the diagnosis event in the clinical timeline that this biospecimen acquisition was related to."},"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_follow_up_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"exposure":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"FSA":{"restrictions":{"regex":{"left":"^[A-Za-z][0-9][A-Za-z]$","right":null}}}},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"phenotype":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_phenotype_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}}},"created":{"phenotype_HPO_term":{"changeType":"created","name":"phenotype_HPO_term","valueType":"string","description":"Term and code used for the phenotype in the Human Phenotype Ontology terminology","restrictions":{"required":true},"meta":{"core":true,"notes":"Write the full term used in HPO followed by the code in parenthesis, for instance: Hand polydactyly (HP:0001161). Refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification.","displayName":"Human Phenotype Ontology term"}},"phenotype_HPO_category":{"changeType":"created","name":"phenotype_HPO_category","valueType":"string","description":"Term used for the phenotypic abnormality category in the Human Phenotype Ontology terminology","restrictions":{"required":true},"meta":{"core":true,"displayName":"Category of phenotypic abnormality","notes":"Refer to the categories of the Phenotypic Abnormality Subontology of the HPO (HP:000018) https://hpo.jax.org/app/browse/term/HP:0000118","examples":"Abnormality of the eye"}}},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"phenotype_source_text":{"changeType":"deleted","name":"phenotype_source_text","valueType":"string","description":"Phenotype (or abnormality) as reported in the study's dataset","restrictions":{"required":true},"meta":{"examples":"microcephaly, angioma","notes":"Provide exact information as per the dataset","displayName":"Name of the phenotype"}},"phenotype_HPO_code":{"changeType":"deleted","name":"phenotype_HPO_code","valueType":"string","description":"Code used for the phenotype in the Human Phenotype Ontology terminology","restrictions":{"required":true,"regex":"^((h|H)(p|P):)[0-9]{7}$"},"meta":{"core":true,"notes":"Write the exact code used in the HPO, for instance: HP:0001161. Please refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification.","displayName":"Human Phenotype Ontology code"}}}},"family_relationship":{"updated":{"submitter_family_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_donor_id_1":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_donor_id_2":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"family_1_2_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}},"family_2_1_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"data":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}}},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}},"family_history":{"updated":{"submitter_donor_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":"To prevent data collisions, submitter_id cannot begin with any of the CQDG ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"submitter_family_condition_id":{"meta":{"notes":{"left":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters.","right":null}},"restrictions":{"regex":{"left":"^[A-Za-z0-9\\-\\._]{1,250}$","right":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}}},"family_condition_relationship":{"meta":{"notes":{"left":null,"right":"Refer to HL7 CodeSystem to identify relationship between donor and family member http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},"restrictions":{"codeList":{"left":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"],"right":null,"data":{"added":[],"deleted":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]}}}},"family_cancer_history":{"restrictions":{"codeList":{"left":["Yes","No","Unknown"],"right":["Yes","No","unknow"],"data":{"added":["unknow"],"deleted":["Unknown"]}}}}},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}}}}}}
