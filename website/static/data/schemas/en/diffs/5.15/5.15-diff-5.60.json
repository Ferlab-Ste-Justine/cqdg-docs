{"schemas":{"sample_registration":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study.","right":"Identifier for the Study."}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider.","right":"Identifier of the donor, assigned by the data provider."}},"submitter_biospecimen_id":{"description":{"left":"Unique identifier of the biospecimen, assigned by the data provider.","right":"Identifier of the biospecimen, assigned by the data provider."}}},"created":{"sample_type":{"changeType":"created","description":"Type of molecular sample used for analysis testing","name":"sample_type","valueType":"string","restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","ChIP DNA","Purified PCR Products","Frozen cell suspension","Fresh/Frozen Cell Pellet","Other"]},"meta":{"core":true,"displayName":"Sample type"}}},"deleted":{}},"study":{"updated":{"domain":{"restrictions":{"codeList":{"left":["Cancer","Rare disease","Neurodevelopmental conditions","General health","Not applicable"],"right":["Cancer","Rare disease","Neurodevelopmental conditions","Congenital malformations and deformations","General health","Not applicable"],"data":{"added":["Congenital malformations and deformations"],"deleted":[]}}}}},"created":{"access_limitations":{"changeType":"created","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"created","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const list = [\n            \"DUO:0000017\",\n            \"DUO:0000018\",\n            \"DUO:0000019\",\n            \"DUO:0000020\",\n            \"DUO:0000021\",\n            \"DUO:0000022\",\n            \"DUO:0000025\",\n            \"DUO:0000026\",\n            \"DUO:0000027\",\n            \"DUO:0000028\",\n            \"DUO:0000029\"\n          ];\n        \n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = $field.trim().replace(/\\s/g, '');\n        const currValues = currField.split(';');\n        let valid = true;\n        currValues.forEach((value) => {\n            if (value && !list.includes(value)) {\n                valid = false;\n            }\n        })\n\n        if (!valid) {\n            result = {\n                valid: false, \n                message: `${$name} must contain a list of these codes: ${list.join(';')} separated by semicolon (;)`\n            }\n        }\n        \n        return result;\n    })"]},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO","examples":"DUO:0000021;DUO:0000025"}}},"deleted":{"short_name":{"changeType":"deleted","name":"short_name","valueType":"string","description":"Accronym or short name of the Study","meta":{"core":true,"displayName":"Short name of the Study"}}}},"data access":{"updated":{},"created":{},"deleted":{"entity_type":{"changeType":"deleted","name":"entity_type","valueType":"string","description":"Type of entity to which access limitations and requirements apply","meta":{"core":true,"displayName":"Entity type"},"restrictions":{"required":true,"codeList":["Study","Donnor ","Biospecimen","File"]}},"entity_id":{"changeType":"deleted","name":"entity_id","valueType":"string","description":"Unique identifier for the entity","meta":{"validationDependency":true,"primaryId":true,"displayName":"Entity ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"access_limitations":{"changeType":"deleted","name":"access_limitations","description":"Data access limitations as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000004","DUO:0000005","DUO:0000006","DUO:0000007","DUO:0000011","DUO:0000012","DUO:0000014","DUO:0000015","DUO:0000016","DUO:0000042"]},"meta":{"core":true,"displayName":"Data Access Limitations","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}},"access_requirements":{"changeType":"deleted","name":"access_requirements","description":"Data use requirements as defined in the GA4GH Data Use Ontology (DUO)","valueType":"string","restrictions":{"required":true,"codeList":["DUO:0000017","DUO:0000018","DUO:0000019","DUO:0000020","DUO:0000021","DUO:0000022","DUO:0000025","DUO:0000026","DUO:0000027","DUO:0000028","DUO:0000029"]},"meta":{"core":true,"displayName":"Data Use Requirements","notes":"Refer to the Data Use Ontology code https://github.com/EBISPOT/DUO"}}}},"donor":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"gender":{"restrictions":{"required":{"left":null,"right":true}}},"cause_of_death":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n    if (!currField && vitalStatus.toLowerCase() === 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the donor's vital_status is deceased.`,\n      };\n    } else if (currField && vitalStatus.toLowerCase() !== 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"]}}},"age_of_death":{"valueType":{"left":"integer","right":"number"},"meta":{"units":{"left":"days","right":"years"}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const vitalStatus = $row.vital_status.trim().toLowerCase();\n\n    if (!currField && vitalStatus.toLowerCase() === 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the donor's vital_status is deceased.`,\n      };\n    } else if (currField && vitalStatus.toLowerCase() !== 'deceased') {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided if the donor's vital_status is not deceased.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const vitalStatus = $row.vital_status || '';\n\n        if ($field && vitalStatus && vitalStatus.trim().toLowerCase() !== 'deceased') {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided if the donor's vital_status is not Deceased.`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"biospecimen":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}},"date_biospecimen_collection":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null}}},"tumor_normal_designation":{"meta":{"notes":{"left":null,"right":"Indicate `Not applicable' if the biospecimen was not analysed."}},"restrictions":{"codeList":{"left":["Normal","Tumor"],"right":["Normal","Tumor","Not applicable"],"data":{"added":["Not applicable"],"deleted":[]}}}},"biospecimen_tissue_source":{"restrictions":{"codeList":{"left":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid"],"right":["Amniotic fluid","Anorectal","Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Bronchial specimen","Bronchoalveolar lavage","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Cervix","Cord blood","Cornea or Conjunctiva","Dialysis fluid","Endometrium","Esophagus","Fibroblast","Intestine","Liver","Lower respiratory specimen","Lymph node","Mononuclear cells from bone marrow","Nasopharynx","Oropharyngeal wash","Other","Pericardial fluid","Peritoneal fluid","Plasma","Pleural effusion","Red Blood Cells","Saliva","Specimen","Serum","Skin","Solid tissue","Spleen","Pus","Sputum","Stem cell product","Stomach","Stool","Sweat","Synovial fluid","Throat","Tonsil","Umbilical cord structure","Upper respiratory specimen","Urethra","Urine","Vaginal fluid","Vitreous fluid"],"data":{"added":["Amniotic fluid","Anorectal","Bronchial specimen","Bronchoalveolar lavage","Cervix","Cord blood","Cornea or Conjunctiva","Dialysis fluid","Endometrium","Esophagus","Fibroblast","Intestine","Liver","Lower respiratory specimen","Lymph node","Mononuclear cells from bone marrow","Nasopharynx","Oropharyngeal wash","Other","Pericardial fluid","Peritoneal fluid","Plasma","Pleural effusion","Red Blood Cells","Saliva","Specimen","Serum","Skin","Solid tissue","Spleen","Pus","Sputum","Stem cell product","Stomach","Stool","Sweat","Synovial fluid","Throat","Tonsil","Umbilical cord structure","Upper respiratory specimen","Urethra","Urine","Vaginal fluid","Vitreous fluid"],"deleted":[]}}}},"biospecimen_type":{"restrictions":{"codeList":{"left":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"right":["Cell line - derived from normal","Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Normal","Peritumoral","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Unknown","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"data":{"added":["Cell line - derived from tumor","Cell line - derived from xenograft tumor","Metastatic tumor - additional metastatic","Metastatic tumor - metastasis local to lymph node","Metastatic tumor - metastasis to distant location","Metastatic tumor","Normal - tissue adjacent to primary tumor","Peritumoral","Primary tumor - additional new primary","Primary tumor - adjacent to normal","Primary tumor","Recurrent tumor","Unknown","Xenograft - derived from primary tumor","Xenograft - derived from tumor cell line"],"deleted":["Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line"]}}}},"tumor_histological_type":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorNormalDesignation = $row.tumor_normal_designation.trim().toLowerCase();\n\n    if (!currField && tumorNormalDesignation.toLowerCase() === 'tumor') {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the biospecimen's tumor_normal_designation is tumor.`,\n      };\n    }\n\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumourNormalDesignation = $row.tumour_normal_designation || '';\n\n        if (!currField && tumourNormalDesignation && tumourNormalDesignation.trim().toLowerCase() === 'tumour') {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the biospecimen's tumour_normal_designation is Tumour.`,\n            };\n        }\n\n        return result;\n    })"]}}}},"created":{"biospecimen_anatomic_location_source_text":{"changeType":"created","name":"biospecimen_anatomic_location_source_text","valueType":"string","description":"Indicate the anatomic location where the biospecimen was collected","restrictions":{"required":true},"meta":{"validationDependency":true,"core":true,"notes":"Use the term that was used when collecting the biospecimen","displayName":"Biospecimen anatomic location (term)","examples":"Esophagus"}},"biospecimen_anatomic_location_SNOMED_code":{"changeType":"created","name":"biospecimen_anatomic_location_SNOMED_code","valueType":"string","description":"Indicate the SNOMED CT notation (code) for the anatomic location of the biospecimen","restrictions":{"required":true,"regex":"^[0-9]*$"},"meta":{"validationDependency":true,"core":true,"notes":"Refer to SNOMED CT https://www.snomed.org/snomed-ct/Use-SNOMED-CT","displayName":"Biospecimen anatomic location (code)","examples":"32849002"}}},"deleted":{"biospecimen_anatomic_location":{"changeType":"deleted","name":"biospecimen_anatomic_location","valueType":"string","description":"Indicate the ICD-O-3 topography code for the anatomic location of a biospecimen when it was collected","restrictions":{"required":true,"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"validationDependency":true,"core":true,"notes":"Refer to guidelines in the ICD-O-3 manual: ICD-O-3 manual at https://apps.who.int/iris/handle/10665/42344","displayName":"Biospecimen anatonmic location","examples":"C50.1,C18"}}}},"Diagnosis":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}},"diagnosis_source_text":{"meta":{"core":{"left":null,"right":true}}},"diagnosis_ICD_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((C|c)7(A|a|B|b)|[A-Za-z][0-9]{2})(.[0-9]{1,3}[A-Za-z]{0,1})?$","right":"^[A-TV-Z][0-9][0-9AB].?[0-9A-TV-Z]{0,4}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"diagnosis_mondo_code":{"meta":{"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null},"regex":{"left":"^((M|m)(O|o)(N|n)(D|d)(O|o):)[0-9]{7}$","right":"^(MONDO:)[0-9]{7}$"},"script":{"left":null,"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n        if(!$field){\n            if ($name === 'diagnosis_ICD_code' && !$row.diagnosis_mondo_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_mondo_code does not exist.`,\n                };\n            } else if ($name === 'diagnosis_mondo_code' && !$row.diagnosis_ICD_code) {\n                result = {\n                    valid: false,\n                    message: `${$name} must be provided when the diagnosis' diagnosis_ICD_code does not exist.`,\n                };\n            }\n        }\n\n        return result;\n    })"]}}},"age_at_diagnosis":{"valueType":{"left":"integer","right":"number"},"restrictions":{"required":{"left":true,"right":null},"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    try {\n      const currField = parseFloat($field);\n      if (currField >= 101) {\n        result = {\n          valid: false,\n          message: `${$name} must be between 0 and 100, optionally with decimal.`,\n        };\n      }\n    } catch (err) {\n      result = {\n        valid: false,\n        message: `The value '${field}' of the field ${$name} could not be converted to a decimal number. (parseFloat failed)`,\n      };\n    }\n\n    return result;\n  })()"],"right":null},"range":{"left":null,"right":{"min":0,"max":100}}}},"diagnosis_type":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const isCancer = parseInt($row.is_cancer);\n\n    if (!currField && isCancer === 1) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]}}},"stage_group":{"description":{"left":"Stage group of the tumour, as assigned by the reporting tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.)","right":"Stage group of the tumor, as assigned by the reporting tumor_staging_system, that indicates the overall prognostic tumor stage (ie. Stage I, Stage II, Stage III etc.)"},"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is dependent on the selected tumour_staging_system","right":"This field is dependent on the selected tumor_staging_system"}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const isCancer = parseInt($row.is_cancer);\n\n    if ($field && !$row.tumour_staging_system) {\n      result = {\n        valid: false,\n        message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n      };\n    }\n\n    if (isCancer === 1 && !$field) {\n      result = {\n        valid: false,\n        message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n      };\n    }\n\n    if ($field) {\n      let codeList = [];\n      switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = ['stage i', 'stage ii', 'stage iii'];\n          break;\n        case 'lugano staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage iea',\n            'stage ieb',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iiea',\n            'stage iieb',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs',\n          ];\n          break;\n        case 'rai staging system':\n          codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb',\n          ];\n          break;\n        case 'binet staging system':\n          codeList = ['stage a', 'stage b', 'stage c'];\n          break;\n        case 'ajcc 8th edition':\n          codeList = [\n            'stage 0',\n            'stage 0a',\n            'stage 0is',\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ia3',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ic',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iia1',\n            'stage iia2',\n            'stage iib',\n            'stage iic',\n            'stage iie',\n            'stage iii',\n            'stage iiia',\n            'stage iiia1',\n            'stage iiia2',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iiid',\n            'stage iv',\n            'stage iva',\n            'stage iva1',\n            'stage iva2',\n            'stage ivb',\n            'stage ivc',\n            'occult carcinoma',\n            'stage 1',\n          ];\n          break;\n        case 'ajcc 7th edition':\n          codeList = [\n            'stage 0',\n            'stage 0a',\n            'stage 0is',\n            'stage i',\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage ic',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iia1',\n            'stage iia2',\n            'stage iib',\n            'stage iic',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiic',\n            'stage iiic1',\n            'stage iiic2',\n            'stage iv',\n            'stage iva',\n            'stage iva1',\n            'stage iva2',\n            'stage ivb',\n            'stage ivc',\n            'occult carcinoma',\n            'stage 1',\n          ];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n          $row.tumour_staging_system\n        }', 'stage_group' must be one of the following: \\n${codeList\n          .map((code) => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if ($field && !$row.tumour_staging_system) {\n            result = {\n                valid: false,\n                message: `Please provide a value for the tumour_staging_system or leave stage_group blank`,\n            };\n        }\n\n        if (isCancer && !$field) {\n            result = {\n                valid: false,\n                message: `The stage_group mandatory if the is_cancer flag is set to 1/true`,\n            };\n        }\n\n        if ($field) {\n            let codeList = [];\n            switch ($row.tumour_staging_system && $row.tumour_staging_system.trim().toLowerCase()) {\n                case 'revised international staging system (riss)':\n                    codeList = ['stage i', 'stage ii', 'stage iii'];\n                    break;\n                case 'lugano staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage iea',\n                        'stage ieb',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iiea',\n                        'stage iieb',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'st jude staging system':\n                    codeList = ['stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'ann arbor staging system':\n                    codeList = [\n                        'stage i',\n                        'stage ia',\n                        'stage ib',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iie',\n                        'stage iis',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiie',\n                        'stage iiis',\n                        'stage iv',\n                        'stage iva',\n                        'stage ivb',\n                        'stage ive',\n                        'stage ivs',\n                    ];\n                    break;\n                case 'rai staging system':\n                    codeList = ['stage 0', 'stage i', 'stage ii', 'stage iii', 'stage iv'];\n                    break;\n                case 'durie-salmon staging system':\n                    codeList = [\n                        'stage 1',\n                        'stage 1a',\n                        'stage 1b',\n                        'stage ii',\n                        'stage iia',\n                        'stage iib',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                    ];\n                    break;\n                case 'figo staging system':\n                    codeList = [\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage iia',\n                        'stage iab',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iva',\n                        'stage ivb',\n                    ];\n                    break;\n                case 'binet staging system':\n                    codeList = ['stage a', 'stage b', 'stage c'];\n                    break;\n                case 'ajcc 8th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ia3',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage ie',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iie',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiia1',\n                        'stage iiia2',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iiid',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                case 'ajcc 7th edition':\n                    codeList = [\n                        'stage 0',\n                        'stage 0a',\n                        'stage 0is',\n                        'stage i',\n                        'stage ia',\n                        'stage ia1',\n                        'stage ia2',\n                        'stage ib',\n                        'stage ib1',\n                        'stage ib2',\n                        'stage ic',\n                        'stage is',\n                        'stage ii',\n                        'stage iia',\n                        'stage iia1',\n                        'stage iia2',\n                        'stage iib',\n                        'stage iic',\n                        'stage iii',\n                        'stage iiia',\n                        'stage iiib',\n                        'stage iiic',\n                        'stage iiic1',\n                        'stage iiic2',\n                        'stage iv',\n                        'stage iva',\n                        'stage iva1',\n                        'stage iva2',\n                        'stage ivb',\n                        'stage ivc',\n                        'occult carcinoma',\n                        'stage 1',\n                    ];\n                    break;\n                default:\n                    codelist = [];\n            }\n\n            if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n                const msg = `'${$field}' is not a permissible value. When 'tumour_staging_system' is set to '${\n                    $row.tumour_staging_system\n                }', 'stage_group' must be one of the following: \\n${codeList\n                    .map((code) => `- \"${code}\"`)\n                    .join('\\n')}`;\n\n                result.valid = false;\n                result.message = msg;\n            }\n        }\n        return result;\n    })"]}}},"t_category":{"description":{"left":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual","right":"The code to represent the extent of the primary tumor (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual"},"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"n_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}},"m_category":{"meta":{"dependsOn":{"left":"diagnosis.tumour_staging_system","right":"diagnosis.tumor_staging_system"},"notes":{"left":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","right":"This field is required only if the selected tumor_staging_system is any edition of the AJCC cancer staging system."}},"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const tumorStagingSystem = $row.tumor_staging_system.trim();\n\n    if (!currField && /^(AJCC)\\b/i.test(tumorStagingSystem)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n      };\n    } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n      result = {\n        valid: false,\n        message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const tumorStagingSystem = $row.tumor_staging_system || '';\n\n        if (!currField && tumorStagingSystem && /^(AJCC)\\b/i.test(tumorStagingSystem.trim())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the tumor_staging_system is AJCC.`,\n            };\n        } else if (currField && !/^(AJCC)\\b/i.test($field)) {\n            result = {\n                valid: false,\n                message: `${$name} cannot be provided when the tumor_staging_system is not AJCC.`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{"tumor_staging_system":{"changeType":"created","name":"tumor_staging_system","valueType":"string","description":"Indicate the tumor staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate(inputs) {\n        let result = {valid: true, message: 'Ok'};\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return result;\n        }\n\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const isCancer = $row.is_cancer && $row.is_cancer.trim().toLowerCase() == \"true\";\n\n        if (!currField && isCancer) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n            };\n        }\n        return result;\n    })"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumor Staging System"}}},"deleted":{"tumour_staging_system":{"changeType":"deleted","name":"tumour_staging_system","valueType":"string","description":"Indicate the tumour staging system used to stage the cancer at the time of the diagnosis, prior to treatment","restrictions":{"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const isCancer = parseInt($row.is_cancer);\n\n    if (!currField && isCancer === 1) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the diagnosis' is_cancer flag is 1/true.`,\n      };\n    }\n    return result;\n  })()"]},"meta":{"dependsOn":"diagnosis.is_cancer","core":true,"displayName":"Tumour Staging System"}}}},"treatment":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}},"medication_name":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"medication_code":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"medication_class":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"treatment_start_date":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}},"treatment_end_date":{"restrictions":{"script":{"left":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n    const treatmentType = $row.treatment_type.trim().toLowerCase();\n    const treatmentTypes = [\n      'chemotherapy',\n      'hormonal therapy',\n      'immunotherapy',\n      'other targeting molecular therapy',\n      'other pharmacotherapy',\n    ];\n\n    if (!currField && treatmentTypes.includes(treatmentType)) {\n      result = {\n        valid: false,\n        message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n          ', ',\n        )}`,\n      };\n    }\n    return result;\n  })()"],"right":["(function validate(inputs) {\n        const {$row, $name} = inputs;\n        const $field = $row[$name];\n\n        if(!$field){\n            return {valid: false, message: `Column ${$name} is missing.`};\n        }\n\n        let result = {valid: true, message: 'Ok'};\n        const currField = typeof $field === 'string' ? $field.trim().toLowerCase() : $field;\n        const treatmentType = $row.treatment_type || '';\n        const treatmentTypes = [\n            'chemotherapy',\n            'hormonal therapy',\n            'immunotherapy',\n            'other targeting molecular therapy',\n            'other pharmacotherapy',\n        ];\n\n        if (!currField && treatmentType && treatmentTypes.includes(treatmentType.trim().toLowerCase())) {\n            result = {\n                valid: false,\n                message: `${$name} must be provided when the treatment_type is one of the following: ${treatmentTypes.join(\n                    ', ',\n                )}`,\n            };\n        }\n        return result;\n    })"]}}}},"created":{},"deleted":{}},"follow_up":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}},"submitter_diagnosis_id":{"description":{"left":"Unique identifier of the diagnosis event, assigned by the data provider.","right":"Identifier of the diagnosis event, assigned by the data provider."}},"relapse_interval":{"meta":{"notes":{"left":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","right":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumors) occurred afterwards, then this field will indicate the length of disease free interval, in days."}}}},"created":{},"deleted":{}},"exposure":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}}},"created":{},"deleted":{}},"phenotype":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}},"phenotype_source_text":{"meta":{"core":{"left":null,"right":true}}},"phenotype_HPO_code":{"restrictions":{"regex":{"left":"^((h|H)(p|P):)[0-9]{7}$","right":"^(HP:)[0-9]{7}$"}}},"age_at_phenotype":{"valueType":{"left":"integer","right":"number"},"meta":{"units":{"left":"days","right":"years"},"core":{"left":true,"right":null}},"restrictions":{"required":{"left":true,"right":null}}}},"created":{},"deleted":{}},"family_relationship":{"updated":{},"created":{},"deleted":{"study_id":{"changeType":"deleted","name":"study_id","valueType":"string","description":"Unique identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_family_id":{"changeType":"deleted","name":"submitter_family_id","valueType":"string","description":"Unique identifier of the family, assigned by the data provider","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"Submitter Family ID","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."}},"submitter_donor_id_1":{"changeType":"deleted","description":"Unique identifier of the donor 1, assigned by the data provider","name":"submitter_donor_id_1","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Donor 1 ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_donor_id_2":{"changeType":"deleted","description":"Unique identifier of the donor 2, assigned by the data provider","name":"submitter_donor_id_2","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Donor 2 ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"family_type":{"changeType":"deleted","name":"family_type","description":"Type of family-based study design","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Family Type"}},"family_1_2_relationship":{"changeType":"deleted","name":"family_1_2_relationship","description":"Relationship of donor 1 to donor 2","valueType":"string","restrictions":{"required":true,"codeList":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]},"meta":{"core":true,"displayName":"Relationship of donor 1 to donor 2"}},"family_2_1_relationship":{"changeType":"deleted","name":"family_2_1_relationship","description":"Relationship of donor 2 to donor 1","valueType":"string","restrictions":{"required":true,"codeList":["Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Spouse","Former spouse","Husband","Wife"]},"meta":{"core":true,"displayName":"Relationship of donor 2 to donor 1"}}}},"family_history":{"updated":{"study_id":{"description":{"left":"Unique identifier for the Study","right":"Identifier for the Study"}},"submitter_donor_id":{"description":{"left":"Unique identifier of the donor, assigned by the data provider","right":"Identifier of the donor, assigned by the data provider"}}},"created":{},"deleted":{}},"family":{"updated":{},"created":{"study_id":{"changeType":"created","name":"study_id","valueType":"string","description":"Identifier for the Study","meta":{"validationDependency":true,"primaryId":true,"displayName":"Study ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"submitter_family_id":{"changeType":"created","name":"submitter_family_id","valueType":"string","description":"Identifier of the family, assigned by the data provider","restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"},"meta":{"displayName":"Submitter Family ID","foreignKey":"family.submitter_family_id","validationDependency":true,"primaryId":true,"notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."}},"submitter_donor_id":{"changeType":"created","description":"Unique identifier of the donor, assigned by the data provider","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Donor ID","notes":"Alphanumeric characters along with dot, hyphens and underscores are supported.  Maximum of 250 characters."},"restrictions":{"required":true,"regex":"^[A-Za-z0-9\\-\\._]{1,250}$"}},"family_type":{"changeType":"created","name":"family_type","description":"Type of family-based study design","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Family Type"}},"is_a_proband":{"changeType":"created","description":"Indicate if the donor is a proband or a family member","name":"is_a_proband","restrictions":{"codeList":["Is a family member","Is a proband","Not applicable"]},"valueType":"string","meta":{"displayName":"Is a proband"}},"relationship_to_proband":{"changeType":"created","name":"relationship_to_proband","description":"Relationship of the donor to the proband","valueType":"string","restrictions":{"required":true,"codeList":["Is the proband","Mother","Father","Brother","Sister","Half-brother","Half-sister","Identical twin","Fraternal twin brother","Fraternal twin sister","Son","Daughter","Maternal grand-mother","Maternal grand-father","Paternal grand-mother","Paternal grand-father","Maternal aunt","Maternal uncle","Paternal aunt","Paternal uncle","Maternal cousin","Paternal cousin","Granddaughter","Grandson","Nephew","Niece","Cousin","Spouse","Former spouse","Husband","Wife"]},"meta":{"core":true,"displayName":"Relationship of the donor to the proband"}}},"deleted":{}}}}
