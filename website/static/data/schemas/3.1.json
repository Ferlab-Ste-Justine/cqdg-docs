{"schemas":[{"name":"sample_registration","description":"The collection of data elements required to register the required Donor-Specimen-Sample data to the ARGO Data Platform. Registration of samples is required before molecular and clinical data submission can proceed.","fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"examples":"TEST-CA","notes":"This is the unique id that is assigned to your program.  If you have logged into the platform, this is the Program Id that you see in the Program Services area. For example, TEST-CA is a Program ID.","displayName":"Program ID"},"restrictions":{"required":true}},{"name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"examples":"90234,BLD_donor_89,AML-90","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"gender","valueType":"string","description":"Description of the donor self-reported gender. Gender is described as the assemblage of properties that distinguish people on the basis of their societal roles.","meta":{"validationDependency":true,"core":true,"displayName":"Gender"},"restrictions":{"required":true,"codeList":["Female","Male","Other"]}},{"name":"submitter_specimen_id","valueType":"string","description":"Unique identifier of the specimen, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"examples":"LAML_PO,00445,THY_099-tumour","displayName":"Submitter Specimen ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"specimen_tissue_source","valueType":"string","description":"Tissue source of the biospecimen.","meta":{"validationDependency":true,"core":true,"displayName":"Specimen Tissue Source"},"restrictions":{"required":true,"codeList":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"]}},{"name":"tumour_normal_designation","valueType":"string","description":"Description of specimens tumour/normal status for data processing.","restrictions":{"required":true,"codeList":["Normal","Tumour"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumour Normal Designation"}},{"name":"specimen_type","valueType":"string","description":"Description of the kind of specimen that was collected with respect to tumour/normal tissue origin.","restrictions":{"required":true,"codeList":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line"],"script":["(function validate() {\n\n        const row = $row;\n        let result = {valid: true, message: \"Ok\"};\n        \n        const designation = row.tumour_normal_designation.trim().toLowerCase();\n        const specimen_type = $field.trim().toLowerCase();\n        \n        if (designation === \"normal\"){\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\n            }\n        }\n        else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\n            }\n        }\n        return result;\n    })()"]},"meta":{"validationDependency":true,"core":true,"displayName":"Specimen Type"}},{"name":"submitter_sample_id","valueType":"string","description":"Unique identifier of the sample, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"examples":"hnc_12,CCG_34_94583,BRCA47832-3239","displayName":"Submitter Sample ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"sample_type","valueType":"string","description":"Description of the type of molecular sample used for testing.","meta":{"validationDependency":true,"core":true,"displayName":"Sample Type"},"restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA"]}}]},{"name":"donor","description":"The collection of data elements related to a specific donor in the CQDG program.","meta":{"parent":"specimen"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"description":"Donor's date of birth","name":"dob","valueType":"string","meta":{"core":true,"notes":"partial date of birth may be provided minimum of year of birth","displayName":"dob"},"restrictions":{"required":true}},{"description":"Donor's date of recruitment","name":"date_of_recruitment","valueType":"string","meta":{"core":true,"displayName":"date of recuitment"},"restrictions":{"required":true}},{"description":"Administrative gender of the donor","name":"gender","valueType":"string","restrictions":{"codeList":["Male","Female","Other","Unknown"]},"meta":{"core":true,"notes":"Data from administrative health record, medical record or self-reported","displayName":"Gender"}},{"description":"Ethnic background of the donor","name":"ethnicity","valueType":"string","restrictions":{"codeList":["French Canadian","Aboriginal","European","Arab","Latin American","African or Carabean","East and Southeast Asian","South Asian","Mixted descent","Other"]},"meta":{"displayName":"Ethnicity"}},{"description":"Donor's last known state of living or deceased.","name":"vital_status","restrictions":{"codeList":["Alive","Deceased","Unknown"],"required":true},"valueType":"string","meta":{"validationDependency":true,"core":true,"displayName":"Vital Status"}},{"description":"Indicates the cause of a donor's death","name":"cause_of_death","restrictions":{"codeList":["Cancer","Heart disease","Cerebrovascular disease","Accidental death","Chronic lower respiratory diseases","Influenza and pneumonia","Other reasons","Unknown"],"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]},"valueType":"string","meta":{"core":true,"dependsOn":"donor.vital_status","notes":"Cause of death is only required to be submitted if the donor's vital_status is Deceased.","displayName":"Cause of Death"}},{"description":"Numeric value to represent the age of the donor at the time of death, in days.","name":"age_of_death","valueType":"integer","meta":{"dependsOn":"donor.vital_status","notes":"Age_of_death is only required to be submitted if the donor's vital_status is Deceased.","validationDependency":true,"units":"days","core":"true","displayName":"Age of death"},"restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        const currField = typeof($field) === 'string' ? $field.trim().toLowerCase() : $field;\n        const vitalStatus = $row.vital_status.trim().toLowerCase();\n    \n        if (!currField && vitalStatus === \"deceased\"){\n            result = {valid: false, message: `${$name} must be provided when the donor's vital_status is deceased.`}\n        }\n        else if (currField && vitalStatus != \"deceased\"){\n            result = {valid: false, message: `${$name} cannot be provided if the donor's vital_status is not deceased.`}\n        }\n        return result;\n    })()"]}},{"description":"Indicates the donor's height, in centimeters (cm).","name":"height","valueType":"integer","meta":{"displayName":"Height"}},{"description":"Indicates the donor's weight, in kilograms (kg).","name":"body_weight","valueType":"integer","meta":{"displayName":"Body weight"}},{"description":"Indicates the donor's Body Mass Index (BMI) in kg/m².","name":"bmi","valueType":"integer","meta":{"displayName":"BMI"}},{"description":"Indicates the donor's availability of genealogical data","name":"genealogy_available","restrictions":{"codeList":["Yes","No"]},"valueType":"string","meta":{"displayName":"Availability of genealogical data"}},{"description":"Indicates if the donor is a proband or a family member","name":"is_a_proband","restrictions":{"codeList":["Is a family member","Is a proband","Not applicable"]},"valueType":"string","meta":{"displayName":"Is a proband"}},{"description":"Indicates if the donor is affected by the conditionr","name":"is_affected","restrictions":{"codeList":["Yes","No","Unknown","Not applicable"]},"valueType":"string","meta":{"displayName":"Is affected"}}]},{"name":"specimen","description":"The collection of data elements related to a donor's specimen. A specimen is any material sample taken for testing, diagnostic or research purposes.","meta":{"parent":"sample_registration"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"name":"submitter_donor_id","description":"Unique identifier of the donor, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_specimen_id","description":"Unique identifier of the specimen, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_specimen_id","displayName":"Submitter Specimen ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_primary_diagnosis_id","valueType":"string","description":"Indicate the primary diagnosis event in the clinical timeline that this specimen acquisition was related to.","meta":{"primaryId":true,"displayName":"Submitter Primary Diagnosis ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"description":"Date when biospecimen was collected","name":"date_biospecimen_collection","valueType":"string","meta":{"core":true,"notes":"Collected DateTime","displayName":"Date of biospecimen collection"},"restrictions":{"required":true}},{"description":"Type of molecular sample used for analysis testing","name":"sample_type","valueType":"string","restrictions":{"required":true,"codeList":["Amplified DNA","ctDNA","Other DNA enrichments","Other RNA fractions","polyA+ RNA","Ribo-Zero RNA","Total DNA","Total RNA","Other"]},"meta":{"core":true,"displayName":"Sample type"}},{"name":"tumor_normal_designation","valueType":"string","description":"Description of specimens tumor/normal status for data processing.","restrictions":{"required":true,"codeList":["Normal","Tumor"]},"meta":{"validationDependency":true,"core":true,"displayName":"Tumor Normal Designation"}},{"description":"Tissue source of the biospecimen","name":"biospecimen_tissue_source","valueType":"string","restrictions":{"required":true,"codeList":["Blood derived - bone marrow","Blood derived - peripheral blood","Blood derived","Bone marrow","Bone","Buccal cell","Buffy coat","Cerebellum","Cerebrospinal fluid","Endometrium","Esophagus","Intestine","Lymph node","Mononuclear cells from bone marrow","Other","Plasma","Pleural effusion","Saliva","Serum","Skin","Solid tissue","Spleen","Sputum","Stomach","Tonsil","Urine"]},"meta":{"core":true,"displayName":"Biospecimen_tissue_source"}},{"name":"biospecimen_type","valueType":"string","description":"Description of the kind of biospecimen that was collected","restrictions":{"required":true,"codeList":["Cell line - derived from normal","Cell line - derived from tumour","Cell line - derived from xenograft tumour","Metastatic tumour - additional metastatic","Metastatic tumour - metastasis local to lymph node","Metastatic tumour - metastasis to distant location","Metastatic tumour","Normal - tissue adjacent to primary tumour","Normal","Primary tumour - additional new primary","Primary tumour - adjacent to normal","Primary tumour","Recurrent tumour","Xenograft - derived from primary tumour","Xenograft - derived from tumour cell line","Derived from allogenic bone marrow transplant","Derived from autologous bone marrow transplant"],"script":["(function validate() {\n\n        const row = $row;\n        let result = {valid: true, message: \"Ok\"};\n        \n        const designation = row.tumour_normal_designation.trim().toLowerCase();\n        const specimen_type = $field.trim().toLowerCase();\n        \n        if (designation === \"normal\"){\n            const validTypes = [\"normal\", \"normal - tissue adjacent to primary tumour\", \"cell line - derived from normal\"];\n            if (!validTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type can only be set to a normal type value (Normal, Normal - tissue adjacent to primary tumour, or Cell line - derived from normal) when tumour_normal_designation is set to Normal.\"};\n            }\n        }\n        else if (designation === \"tumour\") {\n            const invalidTypes = [\"normal\", \"cell line - derived from normal\"];\n            if (invalidTypes.includes(specimen_type)){\n                result = {valid: false, message: \"Invalid specimen_type. Specimen_type cannot be set to normal type value (Normal or Cell line - derived from normal) when tumour_normal_designation is set to Tumour.\"};\n            }\n        }\n        return result;\n    })()"]},"meta":{"validationDependency":true,"core":true,"displayName":"Biospecimen Type"}},{"name":"biospecimen_anatomic_location","valueType":"string","description":"Indicate the ICD-O-3 topography code for the anatomic location of a specimen when it was collected.","restrictions":{"required":true,"regex":"^[C][0-9]{2}(.[0-9]{1})?$"},"meta":{"validationDependency":true,"core":true,"notes":"Refer to guidelines in the ICD-O-3 manual: ICD-O-3 manual at https://apps.who.int/iris/handle/10665/42344","displayName":"Biospecimen anatonmic location","examples":"C50.1,C18"}},{"name":"tumor_histological_type","description":"The code to represent the histology (morphology) of neoplasms that is usually obtained from a pathology report, according to the International Classification of Diseases for Oncology, 3rd Edition (WHO ICD-O-3). Refer to the ICD-O-3 manual for guidelines at https://apps.who.int/iris/handle/10665/42344.","valueType":"string","meta":{"validationDependency":true,"core":true,"dependsOn":"sample_registration.tumor_normal_designation","notes":"If specimen is a tumor","examples":"8260/3,9691/36","displayName":"Tumor Histological Type"},"restrictions":{"regex":"^[8,9]{1}[0-9]{3}/[0,1,2,3,6,9]{1}[1-9]{0,1}$"}},{"name":"biospecimen_processing","valueType":"string","description":"Processing method of biospecimen","restrictions":{"codeList":["Cryopreservation in liquid nitrogen (dead tissue)","Cryopreservation in dry ice (dead tissue)","Cryopreservation of live cells in liquid nitrogen","Cryopreservation - other","Formalin fixed & paraffin embedded","Formalin fixed - buffered","Formalin fixed - unbuffered","Fresh","Other"]},"meta":{"displayName":"Biospecimen processing"}},{"name":"biospecimen_storage","valueType":"string","description":"Storage method of biospecimen","restrictions":{"codeList":["Cut slide","Frozen in -70 freezer","Frozen in liquid nitrogen","Frozen in vapour phase","Not Applicable","Other","Paraffin block","RNA later frozen"]},"meta":{"notes":"For specimens that were freshly extracted or immediately cultured, select Not Applicable.","displayName":"Biospecimen storage"}},{"name":"biospecimen_access","valueType":"string","description":"Biospecimen may be accessed (consent type)","restrictions":{"required":true,"codeList":["Yes","No"]},"meta":{"validationDependency":true,"core":true,"displayName":"Biospecimen access"}}]},{"name":"primary_diagnosis","description":"The collection of data elements related to a donor's primary diagnosis. The primary diagnosis is the first diagnosed case of cancer in a donor. To submit multiple primary diagnoses for a single donor, submit multiple rows in the primary diagnosis file for this donor.","meta":{"parent":"donor"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_primary_diagnosis_id","valueType":"string","description":"Unique identifier of the primary diagnosis event, assigned by the data provider.","meta":{"primaryId":true,"displayName":"Submitter Primary Diagnosis ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"diagnosis_ICD_term","valueType":"string","description":"Name of diagnosis","restrictions":{"required":true},"meta":{"core":true,"displayName":"Diagnosis ICD term"}},{"name":"diagnosis_ICD_code","valueType":"string","description":"Code used to define condtion (ICD-10)","restrictions":{"required":true,"regex":"^[C|D][0-9]{2}(.[0-9]{1,3}[A-Z]{0,1})?$"},"meta":{"core":true,"examples":"C41.1,C16.9,C00.5,D46.9","notes":"For WHO ICD-10 codes, refer to https://apps.who.int/classifications/apps/icd/ClassificationDownload/DLArea/Download.aspx","displayName":"Diagnosis ICD-10 code"}},{"name":"age_at_diagnosis","valueType":"integer","description":"Age at diagnosis of condition","restrictions":{"required":true},"meta":{"units":"years","core":true,"displayName":"Age at Diagnosis"}},{"name":"is_self_reported","description":"Indicates whether the information is reported by donor or extracted from (administrative) health records","restrictions":{"codeList":["Yes","No"]},"valueType":"string","meta":{"displayName":"Is self-reported"}},{"name":"is_cancer","description":"The diagnosis is a cancer diagnosis","restrictions":{"codeList":["Yes","No"],"required":true},"valueType":"string","meta":{"core":true,"displayName":"Is cancer diagnosis"}},{"name":"diagnosis_type","description":"Basis of diagnosis","restrictions":{"codeList":["Clinical","Histological"]},"valueType":"string","meta":{"dependsOn":"primary_diagnosis.is_cancer","notes":"Basis of diagnosis is only required to be submitted if the donor's diagnosis is cancer","core":true,"displayName":"Basis of Diagnosis"}},{"name":"tumour_staging_system","valueType":"string","description":"Indicate the tumour staging system used to stage the cancer at the time of primary diagnosis (prior to treatment).","restrictions":{"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    const arrayFormatter = arr => `\\n${arr.map(entry => `- \"${entry}\"`).join('\\n')}`;\n    /* This is not a required field, so first ensure that it exists */\n    if ($field) {\n      /* Contingent on the naming system for tumour staging systems to remain consistent */\n      const stagingName = $name\n        .trim()\n        .toLowerCase()\n        .split('_tumour_staging_system')[0];\n      const requiredFields = [\n        `${stagingName}_m_category`,\n        `${stagingName}_n_category`,\n        `${stagingName}_t_category`,\n      ];\n      const convertedRow = Object.fromEntries(\n        Object.entries($row).map(([fieldName, fieldVal]) => [fieldName.toLowerCase(), fieldVal]),\n      );\n      /* Check for contigous spaces wrapped with quotes (empty strings) */\n      const checkforEmpty = entry => {\n        return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'));\n      };\n\n      /* search for fields with falsy values*/\n      const emptyFields = requiredFields.filter(\n        field => !convertedRow[field] || checkforEmpty(convertedRow[field]),\n      );\n\n      /* The fields should be provided IF and ONLY IF the AJCC regex passes */\n      if (/^(AJCC)\\b/i.test($field) && emptyFields.length) {\n        result = {\n          valid: false,\n          message: `The following fields are required when ${$name} is set to an AJCC option: ${arrayFormatter(\n            emptyFields,\n          )}`,\n        };\n      } else if (!/^(AJCC)\\b/i.test($field) && emptyFields.length != requiredFields.length) {\n        const errorFields = requiredFields.filter(fieldName => !emptyFields.includes(fieldName));\n        result = {\n          valid: false,\n          message: `The following fields cannot be provided when ${$name} is not set to an AJCC option: ${arrayFormatter(\n            errorFields,\n          )}`,\n        };\n      }\n    }\n    return result;\n  })()"],"codeList":["AJCC 8th edition","AJCC 7th edition","Ann Arbor staging system","Binet staging system","Durie-Salmon staging system","FIGO staging system","Lugano staging system","Rai staging system","Revised International staging system (RISS)","St Jude staging system"]},"meta":{"dependsOn":"primary_diagnosis.is_cancer","core":true,"displayName":"Tumour Staging System"}},{"name":"clinical_stage_group","description":"Stage group of the tumour, as assigned by the reporting clinical_tumour_staging_system, that indicates the overall prognostic tumour stage (ie. Stage I, Stage II, Stage III etc.).","valueType":"string","restrictions":{"codeList":["Stage 0","Stage 0a","Stage 0is","Stage I","Stage IA","Stage IA1","Stage IA2","Stage IA3","Stage IB","Stage IB1","Stage IB2","Stage IC","Stage IS","Stage IE","Stage II","Stage IIA","Stage IIA1","Stage IIA2","Stage IIE","Stage IIB","Stage IIC","Stage III","Stage IIIA","Stage IIIA1","Stage IIIA2","Stage IIIB","Stage IIIC","Stage IIIC1","Stage IIIC2","Stage IIID","Stage IV","Stage IVA","Stage IVA1","Stage IVA2","Stage IVB","Stage IVC","Occult carcinoma","Stage 1","Stage 1A","Stage 1B","Stage ISA","Stage ISB","Stage IEA","Stage IEB","Stage IIEA","Stage IIEB","Stage IIES","Stage IIESA","Stage IIESB","Stage IIS","Stage IISA","Stage IISB","Stage IIIE","Stage IIIEA","Stage IIIEB","Stage IIIES","Stage IIIESA","Stage IIIESB","Stage IIIS","Stage IIISA","Stage IIISB","Stage IAB","Stage A","Stage B","Stage C"],"script":["(function validate() {\n    let result = { valid: true, message: 'Ok' };\n    if ($row.clinical_tumour_staging_system && $field) {\n      let codeList = [];\n      switch ($row.clinical_tumour_staging_system && $row.clinical_tumour_staging_system.trim().toLowerCase()) {\n        case 'revised international staging system (riss)':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii'\n          ];\n          break;\n        case 'lugano staging system':\n          codeList = [\n             'stage i',\n             'stage ia',\n             'stage ib',\n             'stage ie',\n             'stage iea',\n             'stage ieb',\n             'stage ii',\n             'stage iia',\n             'stage iib',\n             'stage iie',\n             'stage iiea',\n             'stage iieb',\n             'stage iii',\n             'stage iiia',\n             'stage iiib',\n             'stage iv',\n             'stage iva',\n             'stage ivb'\n          ];\n          break;\n        case 'st jude staging system':\n          codeList = [\n            'stage i',\n            'stage ii',\n            'stage iii',\n            'stage iv'\n          ];\n          break;\n        case 'ann arbor staging system':\n          codeList = [\n            'stage i',\n            'stage ia',\n            'stage ib',\n            'stage ie',\n            'stage is',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iie',\n            'stage iis',\n            'stage iii',\n            'stage iiia',\n            'stage iiib',\n            'stage iiie',\n            'stage iiis',\n            'stage iv',\n            'stage iva',\n            'stage ivb',\n            'stage ive',\n            'stage ivs'\n          ];\n          break;\n        case 'rai staging system':\n          codeList = [\n             'stage 0',\n             'stage i',\n             'stage ii',\n             'stage iii',\n             'stage iv'\n          ];\n          break;\n        case 'durie-salmon staging system':\n          codeList = [\n            'stage 1',\n            'stage 1a',\n            'stage 1b',\n            'stage ii',\n            'stage iia',\n            'stage iib',\n            'stage iii',\n            'stage iiia',\n            'stage iiib'\n          ];\n          break;\n        case 'figo staging system':\n          codeList = [\n            'stage ia',\n            'stage ia1',\n            'stage ia2',\n            'stage ib',\n            'stage ib1',\n            'stage ib2',\n            'stage iia',\n            'stage iab',\n            'stage iiia',\n            'stage iiib',\n            'stage iva',\n            'stage ivb'\n          ];\n          break;\n        case 'binet staging system':\n          codeList = [\n             'stage a',\n             'stage b',\n             'stage c'\n         ];\n          break;\n        case 'ajcc 8th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ia3','stage ib','stage ib1','stage ib2','stage ic','stage ie','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iie','stage iii','stage iiia','stage iiia1','stage iiia2','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iiid','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'];\n          break;\n        case 'ajcc 7th edition':\n          codeList = ['stage 0','stage 0a','stage 0is','stage i','stage ia','stage ia1','stage ia2','stage ib','stage ib1','stage ib2','stage ic','stage is','stage ii','stage iia','stage iia1','stage iia2','stage iib','stage iic','stage iii','stage iiia','stage iiib','stage iiic','stage iiic1','stage iiic2','stage iv','stage iva','stage iva1','stage iva2','stage ivb','stage ivc','occult carcinoma','stage 1'\n];\n          break;\n        default:\n          codelist = [];\n      }\n\n      if (!codeList.includes($field.trim().toLowerCase()) && codeList.length) {\n        const msg = `'${$field}' is not a permissible value. When 'clinical_tumour_staging_system' is set to '${\n          $row.clinical_tumour_staging_system\n        }', 'clinical_stage_group' must be one of the following: \\n${codeList\n          .map(code => `- \"${code}\"`)\n          .join('\\n')}`;\n\n        result.valid = false;\n        result.message = msg;\n      }\n    }\n    return result;\n  })()"]},"meta":{"dependsOn":"primary_diagnosis.tumour_staging_system","notes":"This field is dependent on the selected tumour_staging_system","displayName":"Stage Group"}},{"name":"t_category","description":"The code to represent the extent of the primary tumour (T) based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"primary_diagnosis.tumour_staging_system","notes":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"T Category"},"restrictions":{"codeList":["T0","T1","T1a","T1a1","T1a2","T1b","T1b1","T1b2","T1c","T1d","T1mi","T2","T2a","T2a1","T2a2","T2b","T2c","T2d","T3","T3a","T3b","T3c","T3d","T3e","T4","T4a","T4b","T4c","T4d","T4e","Ta","Tis","Tis(DCIS)","Tis(LAMN)","Tis(LCIS)","Tis(Paget)","Tis(Paget’s)","Tis pd","Tis pu","TX"]}},{"name":"n_category","description":"The code to represent the stage of cancer defined by the extent of the regional lymph node (N) involvement for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual.","valueType":"string","meta":{"dependsOn":"primary_diagnosis.tumour_staging_system","notes":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"N Category"},"restrictions":{"codeList":["N0","N0a","N0a (biopsy)","N0b","N0b (no biopsy)","N0(i+)","N0(i-)","N0(mol+)","N0(mol-)","N1","N1a","N1a(sn)","N1b","N1c","N1mi","N2","N2a","N2b","N2c","N2mi","N3","N3a","N3b","N3c","N4","NX"]}},{"name":"m_category","description":"The code to represent the stage of cancer defined by the extent of the distant metastasis (M) for the cancer based on evidence obtained from clinical assessment parameters determined at time of primary diagnosis and prior to treatment, according to criteria based on multiple editions of the AJCC's Cancer Staging Manual. MX is NOT a valid category and cannot be assigned.","valueType":"string","meta":{"dependsOn":"primary_diagnosis.tumour_staging_system","notes":"This field is required only if the selected tumour_staging_system is any edition of the AJCC cancer staging system.","displayName":"M Category"},"restrictions":{"codeList":["M0","M0(i+)","M1","M1a","M1a(0)","M1a(1)","M1b","M1b(0)","M1b(1)","M1c","M1c(0)","M1c(1)","M1d","M1d(0)","M1d(1)","M1e"]}}]},{"name":"treatment","description":"The collection of data elements related to a donor's treatment at a specific point in the clinical record. To submit multiple treatments for a single donor, please submit treatment rows in the treatment file for this donor.","meta":{"parent":"donor"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the ARGO program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"name":"submitter_donor_id","description":"Unique identifier of the donor, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_treatment_id","description":"Unique identifier of the treatment, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Treatment ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_primary_diagnosis_id","valueType":"string","description":"Indicate the primary diagnosis event in the clinical timeline that this treatment was related to.","meta":{"primaryId":true,"displayName":"Submitter Primary Diagnosis ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"treatment_type","description":"Indicate the type of treatment the donor received.","valueType":"string","isArray":true,"restrictions":{"required":true,"codeList":["Ablation","Bone marrow transplant","Chemotherapy","Endoscopic therapy","Hormonal therapy","Immunotherapy","Other targeting molecular therapy","Other pharmarcotherapy","Other cell-based therapy","Photodynamic therapy","Radiation therapy","Stem cell transplant","Surgery","Other"]},"meta":{"validationDependency":true,"core":true,"displayName":"Treatment Type","examples":"Chemotherapy|Hormonal therapy"}},{"name":"treatment_is_primary","description":"Indicate if the treatment is the primary treatment following the initial diagnosis.","valueType":"string","restrictions":{"codeList":["Yes","No","Unknown"]},"meta":{"displayName":"Is Primary Treatment"}},{"name":"treatment_intent","description":"The purpose of the treatment","valueType":"string","restrictions":{"codeList":["Adjuvant","Concurrent","Curative","Life extending","Neoadjuvant","Not applicable","Palliative","Preventative","Symptoms management","Unknown"]},"meta":{"displayName":"Treatment Intent"}},{"name":"treatment_response","description":"The donor's response to the treatment","valueType":"string","restrictions":{"codeList":["Clinical remission","Disease Progression","Partial Response","Stable Disease","Treatement cessation due to toxicity","Impovement of symptoms","Not applicable","No sign of disease","Worsening of symptoms","No improvement of symptoms"]},"meta":{"displayName":"Response to treatment"}},{"name":"medication_name","valueType":"string","description":"medication name (common term)","meta":{"core":true,"dependsOn":"treatment.treatment_type","displayName":"Medication name"}},{"name":"medication_code","valueType":"string","description":"Drug identification number (DIN code)","meta":{"notes":"The DIN uniquely identifies the manufacturer, product name, active ingredient(s), strength(s) of active ingredient(s);pharmaceutical form and route of administration.","dependsOn":"treatment.treatment_type","displayName":"Drug Identification Number"}},{"name":"medication_class","valueType":"string","description":"Drug class based on ATC (Anatomical Therapeutic Class)","meta":{"core":true,"notes":"The DIN uniquely identifies the manufacturer, product name, active ingredient(s), strength(s) of active ingredient(s);pharmaceutical form and route of administration.","dependsOn":"treatment.treatment_type","displayName":"Medication class"}},{"description":"Date when medication was prescribed (MM-YYY)","name":"medication_start_date","valueType":"string","meta":{"dependsOn":"treatment.treatment_type","displayName":"Medication start date"}},{"description":"Date when medication was stopped (MM-YYYY)","name":"medication_end_date","valueType":"string","meta":{"dependsOn":"treatment.treatment_type","displayName":"Medication end date"}}]},{"name":"follow_up","description":"The collection of data elements related to a specific follow-up visit by a donor with a cancer diagnosis. A follow-up is defined as any point of contact with a patient after primary cancer diagnosis. To submit multiple follow-ups for a single donor, submit multiple rows in the follow-up file for this donor.","meta":{"parent":"donor"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"description":"Unique identifier of the donor, assigned by the data provider.","name":"submitter_donor_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"description":"Unique identifier for a follow-up event in a donor's clinical record, assigned by the data provider.","name":"submitter_follow_up_id","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Follow-Up ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"description":"Time interval between primary diagnosis and follow-up event.","name":"days_to_follow_up","valueType":"integer","restrictions":{"required":true},"meta":{"core":true,"units":"days","displayName":"Days to follow-up"}},{"description":"Indicate the donor's disease status at time of follow-up.","name":"disease_status_at_followup","valueType":"string","restrictions":{"required":true,"codeList":["Clinical remission","Distant progression","Loco-regional progression","No evidence of disease","Partial remission","Relapse or recurrence","Stable"]},"meta":{"core":true,"displayName":"Disease Status at Follow-Up"}},{"name":"relapse_interval","description":"Time interval between end of primary treatment and disease progression (in days)","valueType":"integer","restrictions":{"script":["(function validate() {\n        let result = {valid: true, message: \"Ok\"};\n        \n        /* required field, cannot be null */\n        const diseaseStatus = $row.disease_status_at_followup.trim().toLowerCase();\n        const intervalOfFollowup = parseInt($row.interval_of_followup);\n\n        const stateOfProgression = (entry) => {return /(progression)$/.test(decodeURI(entry))}; \n        const relapseOrRecurrence = diseaseStatus === \"relapse or recurrence\";\n   \n        // checks for a string just consisting of whitespace\n        const checkforEmpty = (entry) => {return /^\\s+$/g.test(decodeURI(entry).replace(/^\"(.*)\"$/, '$1'))};\n\n\n        if ((!$field || checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            result = {valid: false, message: `'${$name}' is a required field if 'disease_status_at_followup' is set a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(!$field || checkforEmpty($field)) && !stateOfProgression(diseaseStatus) && !relapseOrRecurrence) {\n            result = {valid: false, message: `'${$name}' cannot be provided if 'disease_status_at_followup' is not a state of progression, relapse, or recurrence.` }\n        }\n        else if (!(checkforEmpty($field)) && (stateOfProgression(diseaseStatus) || relapseOrRecurrence)) {\n            relapseInterval = parseInt($field);\n            if (relapseInterval > intervalOfFollowup) {\n                result = {valid: false, message: `'${$name}' cannot be greater than the 'interval_of_followup'.` }\n            }\n        }\n        return  result;\n    })()"]},"meta":{"units":"days","dependsOn":"follow_up.disease_status_at_followup","notes":"If the donor was clinically disease free following primary treatment and then relapse or recurrence or progression (for liquid tumours) occurred afterwards, then this field will indicate the length of disease free interval, in days.","displayName":"Relapse Interval"}}]},{"name":"exposure","description":"The collection of data elements related to a donor's exposure to specific risk factors.","fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","restrictions":{"required":true},"meta":{"displayName":"Program ID"}},{"name":"submitter_donor_id","valueType":"string","description":"Unique identifier of the donor, assigned by the data provider.","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Donor ID"}},{"name":"smoking_status","description":"Smoking status of a patient at the time of the data collection.","valueType":"string","restrictions":{"codeList":["Current every day smoker","Current some day smoker","Former smoker","Never smoker","Smoker, current status unknown","Unknown if ever smoked","Current Heavy tobacco smoker (more than 20)","Current Light tobacco smoker"]},"meta":{"displayName":"Smoking status"}},{"name":"smoking_pack_years","description":"Number of packs of cigarette multiplied by the number of cigarettes smoked","valueType":"string","meta":{"dependsOn":"exposure.smoking_status","notes":"Pack-years is calculated by multiplying the number of packs of cigarettes (20 cigarettes per pack) smoked per day by the number of years the person has smoked. For example, 1 pack year is equal to smoking 1 pack per day for 1 year","displayName":"smoking_pack_years"}},{"name":"alcohol_status","description":"Alcohol consumtion based on recommended daily limit","valueType":"string","restrictions":{"codeList":["No alcohol consumtion","Alcohol intake within recommended daily limit","Alcohol intake exceeds recommended daily limit","Alcohol consumption unknownr"]},"meta":{"notes":"Refer to the Canadian Centre on Substance Abuse, for men, no more than 15 drinks a week, with no more than 3 drinks a day most days. No more than 4 drinks on any single occasion. For women, no more than 10 drinks a week, with no more than 2 drinks a day most days. No more than 3 drinks on any single occasion.","displayName":"Alcohol status"}},{"name":"alcohol_consumption_duration","description":"Indicate the duration of time, in years, that the donor has consumed alcohol.","valueType":"integer","meta":{"displayName":"Alcolohol Consumption Duration"}},{"name":"FSA","description":"Forward Sortation Area (3-digit postal code)","valueType":"string","meta":{"notes":"Forward Sortaion Area (FSA) is the 3 first digits of the postal code","displayName":"Forward Sortation Area"}}]},{"name":"phenotype","description":"The collection of data elements related to a donor's phenotypes. To submit multiple phenotypes for a single donor, submit multiple rows in the phenotype file for this donor.","meta":{"parent":"donor"},"fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"},"restrictions":{"required":true}},{"name":"submitter_donor_id","description":"Unique identifier of the donor, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.submitter_donor_id","displayName":"Submitter Donor ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"submitter_phenotype_id","description":"Unique identifier of the phenotype, assigned by the data provider.","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Phenotype ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"phenotype_HPO_code","valueType":"string","description":"Human Phenotype Ontology terminology for observed phenotype","restrictions":{"required":true},"meta":{"core":true,"notes":"Refer to the Human Phenotype Ontology at https://hpo.jax.org/app/ for code identification.","displayName":"Human Phenotype Ontology code","examples":"HP:0000621"}},{"name":"phenotype_HPO_term","valueType":"string","description":"Term used for the phenotype in the Human Phenotype Ontology terminology","restrictions":{"required":true},"meta":{"core":true,"displayName":"Human Phenotype Ontology term"}},{"name":"age_at_phenotype","valueType":"integer","description":"Age (in days) of partipant when phenotype was observed","restrictions":{"required":true},"meta":{"units":"days","core":true,"displayName":"Age at phenotype occurence"}},{"name":"phenotype_observed","description":"Indicate if the phenotype is observed.","valueType":"string","restrictions":{"required":true,"codeList":["Yes","No"]},"meta":{"core":true,"displayName":"Phenotype is observed"}}]},{"name":"family","description":"The collection of data elements related to a family. This table should be completed only if the Study is contributing data from groups of donors who share family ties (ex: twins, trios, sib-pairs).","fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","restrictions":{"required":true},"meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"}},{"name":"submitter_family_id","valueType":"string","description":"Unique identifier of the family, assigned by the data provider.","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Family ID","validationDependency":true,"primaryId":true}},{"name":"family_type","description":"Type of family-based study design.","valueType":"string","restrictions":{"required":true,"codeList":["Case-parent trio","Case-sibling","Twins","Case - affected relative","Other"]},"meta":{"core":true,"displayName":"Family Type"}}]},{"name":"family_relationship","description":"The collection of data elements that describe the relationship between donors from the same family.  This table should be completed only if the Study is contributing data from groups of donors who share family ties (ex: twins, trios, sib-pairs).","fields":[{"name":"program_id","valueType":"string","description":"Unique identifier of the CQDG program.","restrictions":{"required":true},"meta":{"validationDependency":true,"primaryId":true,"foreignKey":"sample_registration.program_id","displayName":"Program ID"}},{"name":"submitter_family_id","valueType":"string","description":"Unique identifier of the family, assigned by the data provider.","restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"},"meta":{"displayName":"Submitter Family ID","validationDependency":true,"primaryId":true}},{"description":"Unique identifier of the donor 1, assigned by the data provider.","name":"submitter_donor_id_1","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Donor 1 ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"description":"Unique identifier of the donor 2, assigned by the data provider.","name":"submitter_donor_id_2","valueType":"string","meta":{"validationDependency":true,"primaryId":true,"displayName":"Submitter Donor 2 ID","notes":"To prevent data collisions, submitter_id cannot begin with any of the ARGO ID prefixes.  The restricted prefixes include: `DO`, `SP`, `SA`,`TR`,`FU`, `PD`."},"restrictions":{"required":true,"regex":"\\b(?!([Dd][Oo])|([Ss][Pp])|([Ss][Aa])|([Tt][Rr])|([pP][Dd])|([Ff][Uu]))\\b^[A-Za-z0-9\\-\\._]{1,64}"}},{"name":"family_1_2_relationship","description":"Relationship of donor 1 to donor 2.","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Relationship of donor 1 to donor 2","notes":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}},{"name":"family_2_1_relationship","description":"Relationship of donor 2 to donor 1.","valueType":"string","restrictions":{"required":true},"meta":{"core":true,"displayName":"Relationship of donor 2 to donor 1","notes":"Refer to HL7 CodeSystem to identify relationship between donors http://terminology.hl7.org/CodeSystem/v3-RoleCode"}}]}],"_id":"5f2ac945e44f81001eb0198b","name":"CQDG Data Dictionary","version":"3.1","createdAt":"2020-08-05T14:59:17.837Z","updatedAt":"2020-08-05T14:59:17.837Z","__v":0}
